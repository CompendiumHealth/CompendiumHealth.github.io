import{k as m,G as f,c as b,L as r,s as t,q as s,w as g,a9 as u,t as y,a as h,a6 as E,o as v}from"./chunks/framework.Bev6ATEH.js";import{w as c,a as n,b2 as k,aH as C,l as _,L as q,j as B,bW as F,b3 as d}from"./chunks/theme.DAWdUpF4.js";import{a as e}from"./chunks/aapl.DY7i4a9z.js";const x=s("h1",{id:"map-transform",tabindex:"-1"},[h("Map transform "),s("a",{class:"header-anchor",href:"#map-transform","aria-label":'Permalink to "Map transform"'},"​")],-1),w=s("p",null,[h("The "),s("strong",null,"map transform"),h(" groups data into series and then transforms each series’ values, say to normalize them relative to some basis or to apply a moving average. For example, below the map transform computes a cumulative sum ("),s("em",null,"cumsum"),h(") of a series of random numbers sampled from a normal distribution — in other words, a random walk.")],-1),P=E(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-random-walk-cumsum-map?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  marks: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ruleY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lineY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({length: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cumsum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {y: d3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randomNormal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()}))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>As another example, we can map the daily trading volume of Apple stock to a <a href="https://en.wikipedia.org/wiki/Quantile" target="_blank" rel="noreferrer"><em>p</em>-quantile</a> in [0, 1] using the <em>quantile</em> map method, where 0 represents the minimum daily trade volume and 1 represents the maximum, and then apply a 30-day rolling mean with the <a href="./window">window transform</a> to smooth out the noise.</p>`,3),T=E(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-quantile-map-transform?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  marks: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ruleY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lineY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aapl, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;quantile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Date&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Volume&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strokeOpacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lineY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aapl, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">windowY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;quantile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Date&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Volume&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>The <a href="#mapY">mapY transform</a> above is shorthand for applying the given map method to all <em>y</em> channels. There’s also a less-common <a href="#mapX">mapX transform</a> for <em>x</em> channels.</p><p>The more explicit <a href="#map">map</a> transform lets you specify which channels to map, and what map method to use for each channel. Like the <a href="./group">group</a> and <a href="./bin">bin</a> transforms, it takes two arguments: an <em>outputs</em> object that describes the output channels to compute, and an <em>options</em> object that describes the input channels and additional options. So this:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cumsum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {y: d3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randomNormal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()})</span></span></code></pre></div><p>Is shorthand for this:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cumsum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {y: d3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randomNormal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()})</span></span></code></pre></div><p>As a more practical example, we can use the map transform to construct <a href="./../marks/bollinger">Bollinger bands</a>, showing both the price and volatility of Apple stock.</p>`,8),Y={class:"label-input"},j=s("span",null,"Window size (n):",-1),S={style:{"font-variant-numeric":"tabular-nums"}},D={class:"label-input"},V=s("span",null,"Radius (k):",-1),A={style:{"font-variant-numeric":"tabular-nums"}},N=E(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-bollinger-band?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  y: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    grid: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  marks: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">areaY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aapl, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({y1: Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bollinger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({n, k: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">k}), y2: Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bollinger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({n, k})}, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Date&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Close&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fillOpacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lineY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aapl, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({y: Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bollinger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({n})}, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Date&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Close&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, stroke: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;blue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lineY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aapl, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Date&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Close&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strokeWidth: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>The <a href="./../marks/bollinger#bollinger">bollinger map method</a> is implemented atop the <a href="./window#window">window map method</a>, computing the mean of values within the rolling window, and then offsetting the mean by a multiple of the rolling deviation.</p><p>The map transform is akin to running <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noreferrer"><em>array</em>.map</a> on the input channel’s values with the given map method. However, the map transform is series-aware: the data are first grouped into series using the <strong>z</strong>, <strong>fill</strong>, or <strong>stroke</strong> channel in the same fashion as the <a href="./../marks/area">area</a> and <a href="./../marks/line">line</a> marks so that series are processed independently.</p><h2 id="map-options" tabindex="-1">Map options <a class="header-anchor" href="#map-options" aria-label="Permalink to &quot;Map options&quot;">​</a></h2><p>The following map methods are supported:</p><ul><li><em>cumsum</em> - a cumulative sum</li><li><em>rank</em> - the rank of each value in the sorted array</li><li><em>quantile</em> - the rank, normalized between 0 and 1</li><li>a function to be passed an array of values, returning new values</li><li>a function to be passed an index and array of channel values, returning new values</li><li>an object that implements the <em>mapIndex</em> method</li></ul><p>If a function is used, it must return an array of the same length as the given input. If a <em>mapIndex</em> method is used, it is repeatedly passed the index for each series (an array of integers), the corresponding input channel’s array of values, and the output channel’s array of values; it must populate the slots specified by the index in the output array.</p><h2 id="map" tabindex="-1">map(<em>outputs</em>, <em>options</em>) <a class="header-anchor" href="#map" aria-label="Permalink to &quot;map(*outputs*, *options*) {#map}&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cumsum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {y: d3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randomNormal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()})</span></span></code></pre></div><p>Groups on the first channel of <strong>z</strong>, <strong>fill</strong>, or <strong>stroke</strong>, if any, and then for each channel declared in the specified <em>outputs</em> object, applies the corresponding map method. Each channel in <em>outputs</em> must have a corresponding input channel in <em>options</em>.</p><h2 id="mapX" tabindex="-1">mapX(<em>map</em>, <em>options</em>) <a class="header-anchor" href="#mapX" aria-label="Permalink to &quot;mapX(*map*, *options*) {#mapX}&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cumsum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {x: d3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randomNormal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()})</span></span></code></pre></div><p>Equivalent to Plot.map({x: <em>map</em>, x1: <em>map</em>, x2: <em>map</em>}, <em>options</em>), but ignores any of <strong>x</strong>, <strong>x1</strong>, and <strong>x2</strong> not present in <em>options</em>. In addition, if none of <strong>x</strong>, <strong>x1</strong>, or <strong>x2</strong> are specified, then <strong>x</strong> defaults to <a href="./../features/transforms#identity">identity</a>.</p><h2 id="mapY" tabindex="-1">mapY(<em>map</em>, <em>options</em>) <a class="header-anchor" href="#mapY" aria-label="Permalink to &quot;mapY(*map*, *options*) {#mapY}&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cumsum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {y: d3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randomNormal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()})</span></span></code></pre></div><p>Equivalent to Plot.map({y: <em>map</em>, y1: <em>map</em>, y2: <em>map</em>}, <em>options</em>), but ignores any of <strong>y</strong>, <strong>y1</strong>, and <strong>y2</strong> not present in <em>options</em>. In addition, if none of <strong>y</strong>, <strong>y1</strong>, or <strong>y2</strong> are specified, then <strong>y</strong> defaults to <a href="./../features/transforms#identity">identity</a>.</p>`,17),L=JSON.parse('{"title":"Map transform","description":"","frontmatter":{},"headers":[],"relativePath":"transforms/map.md","filePath":"transforms/map.md"}'),I={name:"transforms/map.md"},U=Object.assign(I,{setup(O){const a=m(20),i=m(2);return(X,l)=>{const p=f("PlotRender");return v(),b("div",null,[x,w,r(p,{options:{marks:[c([0]),n({length:600},k("cumsum",{y:C.source(_(42))()}))]}},null,8,["options"]),P,r(p,{options:{marks:[c([0,1]),n(t(e),k("quantile",{x:"Date",y:"Volume",strokeOpacity:.2})),n(t(e),q(30,k("quantile",{x:"Date",y:"Volume"})))]}},null,8,["options"]),T,s("p",null,[s("label",Y,[j,g(s("input",{type:"range","onUpdate:modelValue":l[0]||(l[0]=o=>a.value=o),min:"1",max:"100",step:"1"},null,512),[[u,a.value,void 0,{number:!0}]]),s("span",S,y(a.value.toLocaleString("en-US")),1)]),s("label",D,[V,g(s("input",{type:"range","onUpdate:modelValue":l[1]||(l[1]=o=>i.value=o),min:"0",max:"10",step:"0.1"},null,512),[[u,i.value,void 0,{number:!0}]]),s("span",A,y(i.value.toLocaleString("en-US")),1)])]),r(p,{defer:"",options:{y:{grid:!0},marks:[B(t(e),F({y1:d({n:a.value,k:-i.value}),y2:d({n:a.value,k:i.value})},{x:"Date",y:"Close",fillOpacity:.2})),n(t(e),F({y:d({n:a.value})},{x:"Date",y:"Close",stroke:"var(--vp-c-blue)"})),n(t(e),{x:"Date",y:"Close",strokeWidth:1})]}},null,8,["options"]),N])}}});export{L as __pageData,U as default};
