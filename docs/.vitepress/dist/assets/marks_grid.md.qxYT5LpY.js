import{k as d,G as r,c as g,q as s,a as i,L as t,w as E,a8 as c,s as y,t as _,a6 as a,o as u}from"./chunks/framework.Bev6ATEH.js";import{k as m,aW as l,G as F,r as C,ay as b}from"./chunks/theme.DAWdUpF4.js";import{a as v}from"./chunks/alphabet.Chdqe_eo.js";const T={id:"grid-mark",tabindex:"-1"},f=s("a",{class:"header-anchor",href:"#grid-mark","aria-label":'Permalink to "Grid mark <VersionBadge version="0.6.3" />"'},"​",-1),B=s("p",null,[i("The "),s("strong",null,"grid mark"),i(" is a specially-configured "),s("a",{href:"./rule"},"rule"),i(" for drawing an axis-aligned grid. Like the "),s("a",{href:"./axis"},"axis mark"),i(", a grid mark is automatically generated by Plot when you use the "),s("strong",null,"grid"),i(" scale option. But you can also declare a grid mark explicitly, for example to draw grid lines atop rather than below bars.")],-1),P={class:"label-input"},x={class:"language-js vp-adaptive-theme"},q=s("button",{title:"Copy Code",class:"copy"},null,-1),S=s("span",{class:"lang"},"js",-1),A={class:"shiki shiki-themes github-light github-dark vp-code"},w=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Plot."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plot"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"({")],-1),V=a('<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x: {axis: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;top&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, percent: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, grid: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">atop},</span></span>',1),D=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  marks: [")],-1),j=a('<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">barX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(alphabet, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;frequency&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;letter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sort: {y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}}),</span></span>',1),I={class:"line"},X=a('<span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    atop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gridX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({interval: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, stroke: </span>',7),R={style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},N=a('<span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strokeOpacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span>',6),O=a('<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ruleX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>',1),G=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  ]")],-1),Y=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")],-1),W=s("p",null,[i("The "),s("strong",null,"interval"),i(" option above instructs the grid lines to be drawn at unit intervals, "),s("em",null,"i.e."),i(" whole percentages. As an alternative, you can use the "),s("strong",null,"ticks"),i(" option to specify the desired number of ticks or the "),s("strong",null,"tickSpacing"),i(" option to specify the desired separation between adjacent ticks in pixels.")],-1),z=a('<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gridX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({x: {type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;linear&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}})</span></span></code></pre></div><p>The color of the grid lines can be controlled with the <strong>stroke</strong> option (or the alias <strong>color</strong>). While this option is are typically set to a constant color (such as <em>red</em> or the default <em>currentColor</em>), it can be specified as a channel to assign colors dynamically based on the associated tick value.</p>',2),L=a('<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gridX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">101</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), {stroke: Plot.identity, strokeOpacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>You can set other <a href="./../features/marks#mark-options">stroke options</a> to further customize the appearance, say for dashed strokes.</p>',2),U=a('<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gridX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({strokeDasharray: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strokeOpacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({x: {type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;linear&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}})</span></span></code></pre></div><p>See the <a href="./axis">axis mark</a> for more details and examples.</p><h2 id="grid-options" tabindex="-1">Grid options <a class="header-anchor" href="#grid-options" aria-label="Permalink to &quot;Grid options&quot;">​</a></h2><p>The optional <em>data</em> is an array of tick values — it defaults to the scale’s ticks. The grid mark draws a line for each tick value, across the whole frame.</p><p>The following options are supported:</p><ul><li><strong>strokeDasharray</strong> - the <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray" target="_blank" rel="noreferrer">stroke dasharray</a> for dashed lines, defaults to null</li></ul><p>The following options are supported as constant or data-driven channels:</p><ul><li><strong>stroke</strong> - the grid color, defaults to <em>currentColor</em></li><li><strong>strokeWidth</strong> - the grid’s line width, defaults to 1</li><li><strong>strokeOpacity</strong> - the stroke opacity, defaults to 0.1</li><li><strong>y1</strong> - the start of the line, a channel of <em>y</em> positions</li><li><strong>y2</strong> - the end of the line, a channel of <em>y</em> positions</li></ul><p>All the other common options are supported when applicable (<em>e.g.</em>, <strong>title</strong>).</p><h2 id="gridX" tabindex="-1">gridX(<em>data</em>, <em>options</em>) <a class="header-anchor" href="#gridX" aria-label="Permalink to &quot;gridX(*data*, *options*) {#gridX}&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gridX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({strokeDasharray: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;5,3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Returns a new <em>x</em> grid with the given <em>options</em>.</p><h2 id="gridY" tabindex="-1">gridY(<em>data</em>, <em>options</em>) <a class="header-anchor" href="#gridY" aria-label="Permalink to &quot;gridY(*data*, *options*) {#gridY}&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gridY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({strokeDasharray: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;5,3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Returns a new <em>y</em> grid with the given <em>options</em>.</p><h2 id="gridFx" tabindex="-1">gridFx(<em>data</em>, <em>options</em>) <a class="header-anchor" href="#gridFx" aria-label="Permalink to &quot;gridFx(*data*, *options*) {#gridFx}&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gridFx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({strokeDasharray: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;5,3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Returns a new <em>fx</em> grid with the given <em>options</em>.</p><h2 id="gridFy" tabindex="-1">gridFy(<em>data</em>, <em>options</em>) <a class="header-anchor" href="#gridFy" aria-label="Permalink to &quot;gridFy(*data*, *options*) {#gridFy}&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gridFy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({strokeDasharray: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;5,3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Returns a new <em>fy</em> grid with the given <em>options</em>.</p>',21),Q=JSON.parse('{"title":"Grid mark","description":"","frontmatter":{},"headers":[],"relativePath":"marks/grid.md","filePath":"marks/grid.md"}'),J={name:"marks/grid.md"},Z=Object.assign(J,{setup(M){const e=d(!0);return(o,h)=>{const p=r("VersionBadge"),n=r("PlotRender");return u(),g("div",null,[s("h1",T,[i("Grid mark "),t(p,{version:"0.6.3"}),i(),f]),B,s("p",null,[s("label",P,[i(" Show grid on top: "),E(s("input",{type:"checkbox","onUpdate:modelValue":h[0]||(h[0]=k=>e.value=k)},null,512),[[c,e.value]])])]),t(n,{options:{x:{axis:"top",percent:!0,grid:!e.value},marks:[m(y(v),{x:"frequency",y:"letter",sort:{y:"width"}}),e.value?l({interval:1,stroke:"var(--vp-c-bg)",strokeOpacity:.5}):null,F([0])]}},null,8,["options"]),s("div",x,[q,S,s("pre",A,[s("code",null,[w,i(`
`),V,i(`
`),D,i(`
`),j,i(`
`),s("span",I,[X,s("span",R,'"'+_(o.$dark?"black":"white")+'"',1),N]),i(`
`),O,i(`
`),G,i(`
`),Y])])]),W,t(n,{mark:l(),options:{x:{type:"linear"}}},null,8,["mark"]),z,t(n,{mark:l(C(101),{stroke:b,strokeOpacity:1}),options:{}},null,8,["mark"]),L,t(n,{mark:l({strokeDasharray:"2",strokeOpacity:1}),options:{x:{type:"linear"}}},null,8,["mark"]),U])}}});export{Q as __pageData,Z as default};
