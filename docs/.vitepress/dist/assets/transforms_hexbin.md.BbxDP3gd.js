import{k as q,J as g,m as _,p as T,G as y,c as B,q as s,a as i,L as a,t as p,w,a9 as P,S as m,s as b,a6 as e,o as S}from"./chunks/framework.Bev6ATEH.js";import{s as A,c as I,b as F,A as V,z as j,e as o,bv as l,t as O,B as f,bu as N,bV as D,aV as R,aX as z}from"./chunks/theme.DAWdUpF4.js";import{f as Y}from"./chunks/feature.DXDMwmIR.js";import{m as W}from"./chunks/mesh.DUGB6pHu.js";const $={id:"hexbin-transform",tabindex:"-1"},G=s("a",{class:"header-anchor",href:"#hexbin-transform","aria-label":'Permalink to "Hexbin transform <VersionBadge version="0.5.0" />"'},"​",-1),H=s("p",null,[i("The "),s("strong",null,"hexbin transform"),i(" groups two-dimensional quantitative or temporal data — continuous measurements such as heights, weights, or temperatures — into discrete hexagonal bins. You can then compute summary statistics for each bin, such as a count, sum, or proportion. The hexbin transform is most often used to make heatmaps with the "),s("a",{href:"./../marks/dot"},"dot mark"),i(".")],-1),U=s("p",null,[i("For example, the heatmap below shows the weights and heights of Olympic athletes. The color of each hexagon represents the number ("),s("em",null,"count"),i(") of athletes with similar weight and height.")],-1),M=s("a",{class:"plot-fork no-icon",href:"https://observablehq.com/@observablehq/plot-olympians-hexbin?intent=fork",target:"_blank",title:"Open on Observable"},"Fork",-1),X={class:"language-js vp-adaptive-theme"},J=s("button",{title:"Copy Code",class:"copy"},null,-1),L=s("span",{class:"lang"},"js",-1),K={class:"shiki shiki-themes github-light github-dark vp-code"},Q=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Plot")],-1),Z=e('<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hexbin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}))</span></span>',1),ss={class:"line"},is=s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  .",-1),ts=s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plot",-1),es=s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"({color: {scheme: ",-1),as={style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},ns=s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}})",-1),hs=e('<p>Whereas the <a href="./bin">bin transform</a> produces rectangular bins and operates on abstract data, the hexbin transform produces hexagonal bins and operates in “screen space” (<em>i.e.</em>, pixel coordinates) after the <em>x</em> and <em>y</em> scales have been applied to the data. And whereas the bin transform produces <strong>x1</strong>, <strong>y1</strong>, <strong>x2</strong>, <strong>y2</strong> representing rectangular extents, the hexbin transform produces <strong>x</strong> and <strong>y</strong> representing hexagon centers.</p><p>To produce an areal encoding as in a bubble map, output <strong>r</strong>. In this case, the default range of the <em>r</em> scale is set such that the hexagons do not overlap. The <strong>binWidth</strong> option, which defaults to 20, specifies the distance between centers of neighboring hexagons in pixels.</p>',2),ls={class:"label-input"},os={style:{"font-variant-numeric":"tabular-nums"}},rs=e(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-hexbin-binwidth?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hexbin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({r: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, binWidth}))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>If desired, you can output both <strong>fill</strong> and <strong>r</strong> for a redundant encoding.</p>`,3),ps=s("a",{class:"plot-fork no-icon",href:"https://observablehq.com/@observablehq/plot-hexbin-redundant?intent=fork",target:"_blank",title:"Open on Observable"},"Fork",-1),ks={class:"language-js vp-adaptive-theme"},ds=s("button",{title:"Copy Code",class:"copy"},null,-1),Es=s("span",{class:"lang"},"js",-1),gs={class:"shiki shiki-themes github-light github-dark vp-code"},cs=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Plot")],-1),us=e('<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hexbin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, r: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, stroke: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;currentColor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}))</span></span>',1),_s={class:"line"},ys=s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  .",-1),ms=s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plot",-1),bs=s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"({color: {scheme: ",-1),Fs={style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},fs=s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}})",-1),vs=s("div",{class:"tip custom-block"},[s("p",{class:"custom-block-title"},"TIP"),s("p",null,[i("Setting a "),s("strong",null,"stroke"),i(" ensures that the smallest hexagons are visible.")])],-1),Cs=s("strong",null,"fill",-1),xs=s("strong",null,"r",-1),qs=s("strong",null,"r",-1),Ts=s("em",null,"count",-1),Bs=s("strong",null,"fill",-1),ws=s("em",null,"mode",-1),Ps=e(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-bivariate-hexbin?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hexbin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, r: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Using <strong>z</strong>, the hexbin transform will partition hexagons by ordinal value. If <strong>z</strong> is not specified, it defaults to <strong>fill</strong> (if there is no <strong>fill</strong> output channel) or <strong>stroke</strong> (if there is no <strong>stroke</strong> output channel). Setting <strong>z</strong> to <em>sex</em> in the chart above, and switching to <strong>stroke</strong> instead of <strong>fill</strong>, produces separate overlapping hexagons for each sex.</p>`,3),Ss=e(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-overlapping-hexbin?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hexbin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({stroke: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, r: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, z: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, stroke: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>The hexbin transform can be paired with any mark that supports <strong>x</strong> and <strong>y</strong> channels (which is almost all of them). The <a href="./../marks/text">text mark</a> is useful for labelling. By setting the <strong>text</strong> output channel, you can derive the text from the binned contents.</p>`,3),As=e(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-hexbin-text?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hexbin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>The hexbin transform also works with Plot’s <a href="./../features/projections">projection system</a>. Below, hexagon size represents the number of nearby Walmart stores, while color represents the date the first nearby Walmart store opened. (The first Walmart opened in Rogers, Arkansas.)</p>`,3),Is=e(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-hexbin-map?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  projection: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;albers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  r: {range: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  color: {scheme: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;spectral&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, label: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;First year opened&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, legend: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  marks: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">geo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(statemesh, {strokeOpacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">geo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nation),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(walmarts, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hexbin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({r: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;min&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;longitude&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;latitude&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;date&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><p>Beware the <a href="https://en.wikipedia.org/wiki/Modifiable_areal_unit_problem" target="_blank" rel="noreferrer">modifiable areal unit problem</a>. On a small scale map, this is compounded by the Earth’s curvature, which makes it impossible to create an accurate and regular grid. Use an equal-area projection when binning.</p></div><p>The <a href="./../marks/hexgrid">hexgrid mark</a> draws the base hexagonal grid as a mesh. This is useful for showing the empty hexagons, since the hexbin transform does not output empty bins (and unlike the bin transform, the hexbin transform does not currently support the <strong>filter</strong> option).</p>`,4),Vs=e(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-hexgrid-demo?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  marks: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hexgrid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hexbin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({r: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;currentColor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>The hexbin transform defaults the <strong>symbol</strong> option to <em>hexagon</em>, but you can override it. The <a href="./../marks/dot#circle">circle constructor</a> changes it to <em>circle</em>.</p>`,3),js=e('<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-hexbin-circle?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">circle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hexbin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({r: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Hexbins work best when there is an interesting density of dots in the center of the chart, but sometimes hexagons “escape” the edge of the frame and cover the axes. To prevent this, you can use the <strong>inset</strong> <a href="./../features/scales">scale option</a> to reserve space on the edges of the frame.</p>',3),Os=s("a",{class:"plot-fork no-icon",href:"https://observablehq.com/@observablehq/plot-hexbin-inset?intent=fork",target:"_blank",title:"Open on Observable"},"Fork",-1),Ns={class:"language-js vp-adaptive-theme"},Ds=s("button",{title:"Copy Code",class:"copy"},null,-1),Rs=s("span",{class:"lang"},"js",-1),zs={class:"shiki shiki-themes github-light github-dark vp-code"},Ys=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Plot")],-1),Ws=e('<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hexbin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}))</span></span>',1),$s={class:"line"},Gs=e('<span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({inset: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, color: {scheme: </span>',5),Hs={style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},Us=s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}})",-1),Ms=s("div",{class:"tip custom-block"},[s("p",{class:"custom-block-title"},"TIP"),s("p",null,[i("You can also set the dot’s "),s("strong",null,"clip"),i(" option to true to prevent the hexagons from escaping.")])],-1),Xs=s("p",null,[i("Alternatively, use the "),s("a",{href:"./../marks/axis"},"axis mark"),i(" to draw axes on top of the hexagons.")],-1),Js=s("a",{class:"plot-fork no-icon",href:"https://observablehq.com/@observablehq/plot-hexbin-and-axes?intent=fork",target:"_blank",title:"Open on Observable"},"Fork",-1),Ls={class:"language-js vp-adaptive-theme"},Ks=s("button",{title:"Copy Code",class:"copy"},null,-1),Qs=s("span",{class:"lang"},"js",-1),Zs={class:"shiki shiki-themes github-light github-dark vp-code"},si=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Plot."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plot"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"({")],-1),ii={class:"line"},ti=s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  color: {scheme: ",-1),ei={style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},ai=s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"},",-1),ni=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  marks: [")],-1),hi=e('<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hexbin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})),</span></span>',1),li=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    Plot."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"axisX"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(),")],-1),oi=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    Plot."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"axisY"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")],-1),ri=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  ]")],-1),pi=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")],-1),ki=e('<h2 id="hexbin-options" tabindex="-1">Hexbin options <a class="header-anchor" href="#hexbin-options" aria-label="Permalink to &quot;Hexbin options&quot;">​</a></h2><p>The <em>options</em> must specify the <strong>x</strong> and <strong>y</strong> channels. The <strong>binWidth</strong> option (default 20) defines the distance between centers of neighboring hexagons in pixels. If any of <strong>z</strong>, <strong>fill</strong>, or <strong>stroke</strong> is a channel, the first of these channels will be used to subdivide bins.</p><p>The <em>outputs</em> options are similar to the <a href="./bin">bin transform</a>; for each hexagon, an output channel value is derived by reducing the corresponding binned input channel values. The <em>outputs</em> object specifies the reducer for each output channel.</p><p>The following named reducers are supported:</p>',4),di=e('<li><em>first</em> - the first value, in input order</li><li><em>last</em> - the last value, in input order</li><li><em>count</em> - the number of elements (frequency)</li><li><em>distinct</em> - the number of distinct values</li><li><em>sum</em> - the sum of values</li><li><em>proportion</em> - the sum proportional to the overall total (weighted frequency)</li><li><em>proportion-facet</em> - the sum proportional to the facet total</li><li><em>min</em> - the minimum value</li><li><em>min-index</em> - the zero-based index of the minimum value</li><li><em>max</em> - the maximum value</li><li><em>max-index</em> - the zero-based index of the maximum value</li><li><em>mean</em> - the mean value (average)</li><li><em>median</em> - the median value</li><li><em>deviation</em> - the <a href="https://d3js.org/d3-array/summarize#deviation" target="_blank" rel="noreferrer">standard deviation</a></li><li><em>variance</em> - the variance per <a href="https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford&#39;s_online_algorithm" target="_blank" rel="noreferrer">Welford’s algorithm</a></li><li><em>mode</em> - the value with the most occurrences</li><li><em>identity</em> - the array of values</li>',17),Ei=s("em",null,"x",-1),gi=s("em",null,"x",-1),ci=s("em",null,"y",-1),ui=s("em",null,"y",-1),_i=e('<p>In addition, a reducer may be specified as:</p><ul><li>a function to be passed the array of values for each bin and the center of the bin</li><li>an object with a <em>reduceIndex</em> method</li></ul><p>In the last case, the <strong>reduceIndex</strong> method is repeatedly passed three arguments: the index for each bin (an array of integers), the input channel’s array of values, and the center of the bin (an object {data, x, y}); it must then return the corresponding aggregate value for the bin.</p><p>Most reducers require binding the output channel to an input channel; for example, if you want the <strong>y</strong> output channel to be a <em>sum</em> (not merely a count), there should be a corresponding <strong>y</strong> input channel specifying which values to sum. If there is not, <em>sum</em> will be equivalent to <em>count</em>.</p><h2 id="hexbin" tabindex="-1">hexbin(<em>outputs</em>, <em>options</em>) <a class="header-anchor" href="#hexbin" aria-label="Permalink to &quot;hexbin(*outputs*, *options*) {#hexbin}&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hexbin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}))</span></span></code></pre></div><p>Bins hexagonally on <strong>x</strong> and <strong>y</strong>. Also groups on the first channel of <strong>z</strong>, <strong>fill</strong>, or <strong>stroke</strong>, if any.</p>',7),Ci=JSON.parse('{"title":"Hexbin transform","description":"","frontmatter":{},"headers":[],"relativePath":"transforms/hexbin.md","filePath":"transforms/hexbin.md"}'),yi={name:"transforms/hexbin.md"},xi=Object.assign(yi,{setup(mi){const k=q(20),n=g([{weight:31,height:1.21,sex:"female"},{weight:170,height:2.21,sex:"male"}]),c=g([]),r=g(null),v=_(()=>r.value?Y(r.value,r.value.objects.nation):{type:null}),C=_(()=>r.value?W(r.value,r.value.objects.states,(t,d)=>t!==d):{type:null}),u=A({color:{type:"categorical"}}).range;return T(()=>{I("../data/athletes.csv",F).then(t=>n.value=t),V("../data/walmarts.tsv",F).then(t=>c.value=t),j("../data/us-counties-10m.json").then(t=>r.value=t)}),(t,d)=>{const E=y("VersionBadge"),h=y("PlotRender");return S(),B("div",null,[s("h1",$,[i("Hexbin transform "),a(E,{version:"0.5.0"}),i(),G]),H,U,a(h,{defer:"",mark:o(n.value,l({fill:"count"},{x:"weight",y:"height"})),options:{color:{scheme:t.$dark?"turbo":"YlGnBu"}}},null,8,["mark","options"]),M,s("div",X,[J,L,s("pre",K,[s("code",null,[Q,i(`
`),Z,i(`
`),s("span",ss,[is,ts,es,s("span",as,'"'+p(t.$dark?"turbo":"YlGnBu")+'"',1),ns])])])]),hs,s("p",null,[s("label",ls,[i(" Bin width: "),w(s("input",{type:"range","onUpdate:modelValue":d[0]||(d[0]=x=>k.value=x),min:"0",max:"40",step:"0.1"},null,512),[[P,k.value,void 0,{number:!0}]]),s("span",os,p(k.value.toLocaleString("en-US",{minimumFractionDigits:1})),1)])]),a(h,{defer:"",mark:o(n.value,l({r:"count"},{x:"weight",y:"height",binWidth:k.value})),options:{}},null,8,["mark"]),rs,a(h,{defer:"",mark:o(n.value,l({fill:"count",r:"count"},{x:"weight",y:"height",stroke:"currentColor"})),options:{color:{scheme:t.$dark?"turbo":"YlGnBu"}}},null,8,["mark","options"]),ps,s("div",ks,[ds,Es,s("pre",gs,[s("code",null,[cs,i(`
`),us,i(`
`),s("span",_s,[ys,ms,bs,s("span",Fs,'"'+p(t.$dark?"turbo":"YlGnBu")+'"',1),fs])])])]),vs,s("p",null,[i("Alternatively, the "),Cs,i(" and "),xs,i(" channels can encode independent (or “bivariate”) dimensions of data. Below, the "),qs,i(" channel uses "),Ts,i(" as before, while the "),Bs,i(" channel uses "),ws,i(" to show the most frequent sex of athletes in each hexagon. The larger athletes are more likely to be "),s("span",{style:m({borderBottom:`solid 2px ${b(u)[1]}`})},"male",4),i(", while the smaller athletes are more likely to be "),s("span",{style:m({borderBottom:`solid 2px ${b(u)[0]}`})},"female",4),i(".")]),a(h,{defer:"",mark:o(n.value,l({fill:"mode",r:"count"},{x:"weight",y:"height",fill:"sex"})),options:{}},null,8,["mark"]),Ps,a(h,{defer:"",mark:o(n.value,l({stroke:"mode",r:"count"},{x:"weight",y:"height",z:"sex",stroke:"sex"})),options:{}},null,8,["mark"]),Ss,a(h,{defer:"",mark:O(n.value,l({text:"count"},{x:"weight",y:"height"})),options:{}},null,8,["mark"]),As,a(h,{defer:"",options:{projection:"albers",r:{range:[0,16]},color:{scheme:"spectral",label:"First year opened",legend:!0},marks:[f(C.value,{strokeOpacity:.5}),f(v.value),o(c.value,l({r:"count",fill:"min"},{x:"longitude",y:"latitude",fill:"date"}))]}},null,8,["options"]),Is,a(h,{defer:"",options:{marks:[N(),o(n.value,l({r:"count"},{x:"weight",y:"height",fill:"currentColor"}))]}},null,8,["options"]),Vs,a(h,{defer:"",mark:D(n.value,l({r:"count"},{x:"weight",y:"height"})),options:{}},null,8,["mark"]),js,a(h,{defer:"",mark:o(n.value,l({fill:"count"},{x:"weight",y:"height"})),options:{inset:10,color:{scheme:t.$dark?"turbo":"YlGnBu"}}},null,8,["mark","options"]),Os,s("div",Ns,[Ds,Rs,s("pre",zs,[s("code",null,[Ys,i(`
`),Ws,i(`
`),s("span",$s,[Gs,s("span",Hs,'"'+p(t.$dark?"turbo":"YlGnBu")+'"',1),Us])])])]),Ms,Xs,a(h,{defer:"",options:{color:{scheme:t.$dark?"turbo":"YlGnBu"},marks:[o(n.value,l({fill:"count"},{x:"weight",y:"height"})),R(),z()]}},null,8,["options"]),Js,s("div",Ls,[Ks,Qs,s("pre",Zs,[s("code",null,[si,i(`
`),s("span",ii,[ti,s("span",ei,'"'+p(t.$dark?"turbo":"YlGnBu")+'"',1),ai]),i(`
`),ni,i(`
`),hi,i(`
`),li,i(`
`),oi,i(`
`),ri,i(`
`),pi])])]),ki,s("ul",null,[di,s("li",null,[Ei,i(),a(E,{version:"0.6.12",pr:"1916"}),i(" - the hexagon’s "),gi,i(" center")]),s("li",null,[ci,i(),a(E,{version:"0.6.12",pr:"1916"}),i(" - the hexagon’s "),ui,i(" center")])]),_i])}}});export{Ci as __pageData,xi as default};
