import{z as f,B as c,t as v,br as o,bc as F,e as r,bq as _,bv as C,bs as T,aJ as B}from"./chunks/theme.DAWdUpF4.js";import{f as E}from"./chunks/feature.DXDMwmIR.js";import{m as P}from"./chunks/mesh.DUGB6pHu.js";import{J as j,m as p,p as S,G as y,c as q,q as s,a as i,L as a,t as u,a6 as e,o as A}from"./chunks/framework.Bev6ATEH.js";const V={id:"centroid-transform",tabindex:"-1"},x=s("a",{class:"header-anchor",href:"#centroid-transform","aria-label":'Permalink to "Centroid transform <VersionBadge version="0.6.2" />"'},"​",-1),I=s("p",null,[i("Plot offers two transforms that derive centroids from GeoJSON geometries: "),s("a",{href:"#centroid"},"centroid"),i(" and "),s("a",{href:"#geoCentroid"},"geoCentroid"),i(". These transforms can be used by any mark that accepts "),s("strong",null,"x"),i(" and "),s("strong",null,"y"),i(" channels. Below, a "),s("a",{href:"./../marks/text"},"text mark"),i(" labels the U.S. states.")],-1),O=s("a",{class:"plot-fork no-icon",href:"https://observablehq.com/@observablehq/plot-state-labels?intent=fork",target:"_blank",title:"Open on Observable"},"Fork",-1),N={class:"language-js vp-adaptive-theme"},w=s("button",{title:"Copy Code",class:"copy"},null,-1),D=s("span",{class:"lang"},"js",-1),R={class:"shiki shiki-themes github-light github-dark vp-code"},J=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Plot."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plot"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"({")],-1),G=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  projection: "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"albers-usa"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")],-1),z=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  marks: [")],-1),$=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    Plot."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"geo"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(statemesh),")],-1),H={class:"line"},L=e('<span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(states, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">centroid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d.properties.name, fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;currentColor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, stroke: </span>',13),M={style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},U=s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}))",-1),W=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  ]")],-1),K=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")],-1),Q=s("p",null,[i("For fun, we can pass county centroids to the "),s("a",{href:"./../marks/delaunay"},"voronoi mark"),i(".")],-1),X=e('<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-centroid-voronoi?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">voronoi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(counties, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">centroid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({projection: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;albers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>While the centroid transform computes the centroid of a geometry <em>after</em> projection, the geoCentroid transform computes it <em>before</em> projection, then projects the resulting coordinates. This difference has a few implications, as follows.</p><p>As an <a href="./../features/transforms#custom-initializers">initializer</a>, the centroid transform operates <em>after</em> the geometries have been projected to screen coordinates. The resulting <strong>x</strong> and <strong>y</strong> channels reference the pixel coordinates of the planar centroid of the <em>projected</em> shapes. No assumption is made about the geometries: they can be in any coordinate system, and the returned value is in the frame — as long as the projected geometry returns at least one visible point.</p>',4),Y=e('<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-centroid-dot?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(counties, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">centroid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({projection: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;albers-usa&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>The geoCentroid transform is more specialized as the <strong>x</strong> and <strong>y</strong> channels it derives represent the longitudes and latitudes of the centroids of the given GeoJSON geometries, before projection. It expects the geometries to be specified in <em>spherical</em> coordinates. It is more correct, in a geospatial sense — for example, the spherical centroid always represents the center of mass of the original shape, and it will be rotated exactly in line with the projection’s rotate argument. However, this also means that it might land outside the frame if only a part of the land mass is visible, and might be clipped by the projection. In practice, the difference is generally imperceptible.</p>',3),Z=e('<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-centroid-dot?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(counties, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">geoCentroid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({projection: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;albers-usa&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>The geoCentroid transform is slightly faster than the centroid initializer — which might be useful if you have tens of thousands of features and want to show their density on a <a href="./../transforms/hexbin">hexbin map</a>:</p>',3),ss=e('<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-centroid-hexbin?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(counties, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hexbin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({r:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">geoCentroid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({projection: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;albers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Combined with the <a href="./../interactions/pointer">pointer transform</a>, the centroid transform can add <a href="./../marks/tip">interactive tips</a> on a map:</p>',3),is=s("a",{class:"plot-fork no-icon",href:"https://observablehq.com/@observablehq/plot-state-centroids?intent=fork",target:"_blank",title:"Open on Observable"},"Fork",-1),ts={class:"language-js vp-adaptive-theme"},es=s("button",{title:"Copy Code",class:"copy"},null,-1),as=s("span",{class:"lang"},"js",-1),ns={class:"shiki shiki-themes github-light github-dark vp-code"},os=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Plot."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plot"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"({")],-1),ls=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  projection: "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"albers-usa"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")],-1),hs=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  marks: [")],-1),rs=e('<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">geo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(statemesh, {strokeOpacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}),</span></span>',1),ps=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    Plot."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"geo"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(nation),")],-1),ks={class:"line"},ds=e('<span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(states, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">centroid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, stroke: </span>',7),cs={style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},Es=s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})),",-1),gs=e('<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(states, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">centroid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d.properties.name})))</span></span>',1),_s=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  ]")],-1),ys=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")],-1),us=e('<h2 id="centroid" tabindex="-1">centroid(<em>options</em>) <a class="header-anchor" href="#centroid" aria-label="Permalink to &quot;centroid(*options*) {#centroid}&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">centroid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({geometry: Plot.identity})</span></span></code></pre></div><p>The centroid initializer derives <strong>x</strong> and <strong>y</strong> channels representing the planar (projected) centroids for the given GeoJSON geometry. If the <strong>geometry</strong> option is not specified, the mark’s data is assumed to be GeoJSON objects.</p><h2 id="geoCentroid" tabindex="-1">geoCentroid(<em>options</em>) <a class="header-anchor" href="#geoCentroid" aria-label="Permalink to &quot;geoCentroid(*options*) {#geoCentroid}&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">geoCentroid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({geometry: Plot.identity})</span></span></code></pre></div><p>The geoCentroid transform derives <strong>x</strong> and <strong>y</strong> channels representing the spherical centroids for the given GeoJSON geometry. If the <strong>geometry</strong> option is not specified, the mark’s data is assumed to be GeoJSON objects.</p>',6),Bs=JSON.parse('{"title":"Centroid transform","description":"","frontmatter":{},"headers":[],"relativePath":"transforms/centroid.md","filePath":"transforms/centroid.md"}'),ms={name:"transforms/centroid.md"},Ps=Object.assign(ms,{setup(bs){const t=j(null),g=p(()=>t.value?P(t.value,t.value.objects.states):{type:null}),k=p(()=>t.value?E(t.value,t.value.objects.states).features:[]),l=p(()=>t.value?E(t.value,t.value.objects.counties).features:[]),m=p(()=>t.value?E(t.value,t.value.objects.nation):[]);return S(()=>{f("../data/us-counties-10m.json").then(h=>t.value=h)}),(h,fs)=>{const b=y("VersionBadge"),n=y("PlotRender");return A(),q("div",null,[s("h1",V,[i("Centroid transform "),a(b,{version:"0.6.2"}),i(),x]),I,a(n,{defer:"",options:{projection:"albers-usa",marks:[c(g.value),v(k.value,o({text:d=>d.properties.name,fill:"currentColor",stroke:"var(--vp-c-bg)"}))]}},null,8,["options"]),O,s("div",N,[w,D,s("pre",R,[s("code",null,[J,i(`
`),G,i(`
`),z,i(`
`),$,i(`
`),s("span",H,[L,s("span",M,'"'+u(h.$dark?"black":"white")+'"',1),U]),i(`
`),W,i(`
`),K])])]),Q,a(n,{defer:"",mark:F(l.value,o()),options:{projection:"albers"}},null,8,["mark"]),X,a(n,{defer:"",mark:r(l.value,o()),options:{projection:"albers-usa"}},null,8,["mark"]),Y,a(n,{defer:"",mark:r(l.value,_()),options:{projection:"albers-usa"}},null,8,["mark"]),Z,a(n,{defer:"",mark:r(l.value,C({r:"count"},_())),options:{projection:"albers"}},null,8,["mark"]),ss,a(n,{defer:"",options:{projection:"albers-usa",marks:[c(g.value,{strokeOpacity:.2}),c(m.value),r(k.value,o({fill:"var(--vp-c-red)",stroke:"var(--vp-c-bg-alt)"})),T(k.value,B(o({title:d=>d.properties.name})))]}},null,8,["options"]),is,s("div",ts,[es,as,s("pre",ns,[s("code",null,[os,i(`
`),ls,i(`
`),hs,i(`
`),rs,i(`
`),ps,i(`
`),s("span",ks,[ds,s("span",cs,'"'+u(h.$dark?"black":"white")+'"',1),Es]),i(`
`),gs,i(`
`),_s,i(`
`),ys])])]),us])}}});export{Bs as __pageData,Ps as default};
