import{c as E,b as c,aU as t}from"./chunks/theme.DAWdUpF4.js";import{a as d}from"./chunks/aapl.DY7i4a9z.js";import{i as r}from"./chunks/bls-industry-unemployment.BPQ_6ZKz.js";import{p as h}from"./chunks/penguins.C-n8z74Q.js";import{J as u,p as y,G as g,c as m,q as o,a as n,L as s,s as e,a6 as i,o as b}from"./chunks/framework.Bev6ATEH.js";const _={id:"auto-mark",tabindex:"-1"},F=o("a",{class:"header-anchor",href:"#auto-mark","aria-label":'Permalink to "Auto mark <VersionBadge version="0.6.3" />"'},"​",-1),v=o("p",null,[n("The magic ✨ "),o("strong",null,"auto mark"),n(" automatically selects a mark type that best represents the given dimensions of the data according to some simple heuristics. The auto mark — which powers "),o("a",{href:"https://observablehq.com/@observablehq/chart-cell",target:"_blank",rel:"noreferrer"},"Observable’s chart cell"),n(" — is intended to support fast exploratory analysis where the goal is to get a useful plot as quickly as possible. For example, two quantitative dimensions make a scatterplot:")],-1),C=i('<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-auto-mark-scatterplot?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;body_mass_g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;flipper_length_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The auto mark is supposed to be fast and fluid, so don’t overthink it. If you need precise control, use explicit marks instead.</p></div><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><p>While the auto mark will respect the options you provide, you shouldn’t rely on its behavior being stable over time. The auto mark may get smarter and take advantage of new features. Because its heuristics are likely to evolve, they are not explicitly documented; see the <a href="https://github.com/observablehq/plot/blob/main/src/marks/auto.js" target="_blank" rel="noreferrer">source code</a> for details.</p></div><p>A monotonically increasing dimension (here <em>Date</em>, as the data is ordered chronologically), paired with a numeric column (<em>Close</em>), makes a line chart:</p>',5),f=i('<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-auto-mark-line-chart?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aapl, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Date&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Close&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Given only one dimension of data, it makes a histogram:</p>',3),q=i('<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-auto-mark-quantitative-histogram?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div>',2),T=i('<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-auto-mark-ordinal-histogram?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;island&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>This is easier than deciding whether to use bin and rect, or group and bar: the auto mark chooses the right one based on whether the data is quantitative or ordinal.</p><p>If you’d like to explicitly avoid grouping the data, you can opt out of the reducer, and get a one-dimensional plot:</p>',4),B=i('<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-auto-mark-barcode?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;body_mass_g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: {reduce: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>As you can see from that <strong>reduce</strong> property, the auto mark has some special syntax that lets you specify a reducer without explicitly specifying a transform. For example, the scatterplot above can be made into a heatmap by adding a color reducer. You can pass the name of a reducer to that property, or pass a shorthand string:</p>',3),x=i('<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-auto-mark-heatmap?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, color: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>That’s equivalent to this:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Notice that the code above makes you think about nested functions and two different options objects, which the auto mark flattens. The auto mark infers that it should use a <a href="./rect">rect</a>; that it should <a href="./../transforms/bin">bin</a> on <strong>x</strong> and <strong>y</strong>; that the kind of color should be a <strong>fill</strong>; and that <strong>fill</strong> is an “output” of the reducer, whereas <strong>x</strong> and <strong>y</strong> are “inputs”.</p><p>This saves you a little bit of typing, but, more importantly, it means that switching from showing one dimension to another only involves changing <em>one thing</em>. In the code above, if you change <strong>y</strong> from <em>weight</em> to <em>sex</em>, it’ll break, because <em>sex</em> is ordinal instead of quantitative. (You’d also have to change <a href="./rect">rect</a> to <a href="./bar#barX">barX</a>, and <a href="./../transforms/bin#bin">bin</a> to <a href="./../transforms/bin#binX">binX</a>.) With the auto mark, it just works:</p>',6),w=i('<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-auto-mark-heatmap-2?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, color: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Similarly, with explicit marks and transforms, changing a vertical histogram to a horizontal histogram involves switching <a href="./rect#rectY">rectY</a> to <a href="./rect#rectX">rectX</a>, <a href="./../transforms/bin#binX">binX</a> to <a href="./../transforms/bin#binY">binY</a>, <strong>x</strong> to <strong>y</strong>, and <strong>y</strong> to <strong>x</strong>. With the auto mark, just specify <strong>y</strong> instead of <strong>x</strong>:</p>',3),P=i('<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-auto-mark-horizontal-histogram?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;island&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>For the sake of seamless switching, the auto mark has just one color channel, which it assigns to either <strong>fill</strong> or <strong>stroke</strong> depending on the mark. We can see that clearly by overriding a line chart with the <strong>mark</strong> option to make an area chart:</p>',3),S=i('<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-auto-mark-color-channel?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(industries, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;date&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;unemployed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, color: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;industry&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div>',2),A=i('<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(industries, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;date&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;unemployed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, color: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;industry&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mark: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;area&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>The <strong>mark</strong> override option supports <a href="./dot">dot</a>, <a href="./line">line</a>, <a href="./area">area</a>, <a href="./rule">rule</a>, and <a href="./bar">bar</a> (which automatically chooses among barX, barY, rectX, rectY, rect, and cell).</p><p>You can get a more elaborate aggregated chart by passing an object with both a <strong>value</strong> (the input dimension) and a <strong>reduce</strong> (the reducer). For example, here’s the average heights of Olympians over time by sex:</p>',3),j=i(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-auto-mark-with-value-and-reduce?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;date_of_birth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: {value: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, reduce: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mean&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, color: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mark: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;line&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({color: {legend: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}})</span></span></code></pre></div><p>You can similarly pass a <strong>zero</strong> option to indicate that zero is meaningful for either <strong>x</strong> or <strong>y</strong>. This adds a corresponding rule to the returned mark.</p>`,3),V=i('<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-auto-mark-zero-option?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(industries, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;date&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: {value: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;unemployed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, zero: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, color: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;industry&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>The auto mark has a <strong>size</strong> channel, which (currently) always results in a dot. For now, it’s an alias for the dot’s <strong>r</strong> channel; in the future it will also represent a vector’s <strong>length</strong> channel.</p>',3),I=i('<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-auto-mark-size-channel?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aapl, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Date&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Close&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, size: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Volume&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Like with any other mark, you can also use <strong>fx</strong> or <strong>fy</strong>, and pass additional global options in the plot method.</p>',3),O=i(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-auto-mark-faceted?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;body_mass_g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_length_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fx: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;island&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  fy: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;species&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  grid: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x: {ticks: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  marginRight: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Caution</p><p>You can combine the auto mark with other marks, but the combination may be brittle because the auto mark may pick encodings that don’t play well with others.</p></div><h2 id="auto-options" tabindex="-1">Auto options <a class="header-anchor" href="#auto-options" aria-label="Permalink to &quot;Auto options&quot;">​</a></h2><p>The auto mark currently supports only a subset of the standard <a href="./../features/marks#mark-options">mark options</a>. You must provide at least one position channel:</p><ul><li><strong>x</strong> - horizontal position</li><li><strong>y</strong> - vertical position</li></ul><p>You may also provide one or more visual encoding channels:</p><ul><li><strong>color</strong> - corresponds to <strong>stroke</strong> or <strong>fill</strong> (depending on the chosen mark type)</li><li><strong>size</strong> - corresponds to <strong>r</strong> (and in future, possibly <strong>length</strong>)</li></ul><p>And you may specify the standard mark-level facet channels:</p><ul><li><strong>fx</strong> - horizontal facet position (column)</li><li><strong>fy</strong> - vertical facet position (row)</li></ul><p>In addition to channel values, the <strong>x</strong>, <strong>y</strong>, <strong>color</strong>, and <strong>size</strong> options may specify reducers. Setting a reducer on <strong>x</strong> implicitly groups or bins on <strong>y</strong>, and likewise setting a reducer on <strong>y</strong> implicitly groups or bins on <strong>x</strong>. Setting a reducer on <strong>color</strong> or <strong>size</strong> groups or bins in both <strong>x</strong> and <strong>y</strong>. Setting a reducer on both <strong>x</strong> and <strong>y</strong> throws an error. To specify a reducer, simply pass the reducer name to the corresponding option. For example:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;body_mass_g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>To pass both a value and a reducer, or to disambiguate whether the given string represents a field name or a reducer name, the <strong>x</strong>, <strong>y</strong>, <strong>color</strong>, and <strong>size</strong> options can also be specified as an object with separate <strong>value</strong> and <strong>reduce</strong> properties. For example, to compute the total weight of the penguins in each bin:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;body_mass_g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: {value: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;body_mass_g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, reduce: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}})</span></span></code></pre></div><p>If the <strong>color</strong> channel is specified as a string that is also a valid CSS color, it is interpreted as a constant color. For example, for red bars:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;body_mass_g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, color: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>This is shorthand for:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;body_mass_g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, color: {color: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}})</span></span></code></pre></div><p>To reference a field name instead as a variable color encoding, specify the <strong>color</strong> option as an object with a <strong>value</strong> property:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;body_mass_g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, color: {value: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}})</span></span></code></pre></div><p>Alternatively, you can specify a function of data or an array of values, as with a standard mark channel.</p><p>The auto mark chooses the mark type automatically based on several simple heuristics. For more control, you can specify the desired mark type using the <strong>mark</strong> option, which supports the following names:</p><ul><li><em>area</em> - areaY or areaX (or sometimes area)</li><li><em>bar</em> - barY or barX; or rectY, rectX, or rect; or cell</li><li><em>dot</em> - dot</li><li><em>line</em> - lineY or lineX (or sometimes line)</li><li><em>rule</em> - ruleY or ruleX</li></ul><p>The chosen mark type depends both on the options you provide (<em>e.g.</em>, whether you specified <strong>x</strong> or <strong>y</strong> or both) and the inferred type of the corresponding data values (whether the associated dimension of data is quantitative, categorical, monotonic, <em>etc.</em>).</p><h2 id="auto" tabindex="-1">auto(<em>data</em>, <em>options</em>) <a class="header-anchor" href="#auto" aria-label="Permalink to &quot;auto(*data*, *options*) {#auto}&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, color: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// equivalent to rect + bin, say</span></span></code></pre></div><p>Returns an automatically-chosen mark with the given <em>data</em> and <em>options</em>, suitable for a quick view of the data.</p>`,27),D={id:"autoSpec",tabindex:"-1"},N=o("em",null,"data",-1),R=o("em",null,"options",-1),Y=o("a",{class:"header-anchor",href:"#autoSpec","aria-label":'Permalink to "autoSpec(*data*, *options*) <VersionBadge version="0.6.4" /> {#autoSpec}"'},"​",-1),z=i('<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">autoSpec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, color: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Returns an auto mark <em>options</em> object with no option undefined; the mark type, reducers, and other options are all populated.</p>',2),K=JSON.parse('{"title":"Auto mark","description":"","frontmatter":{},"headers":[],"relativePath":"marks/auto.md","filePath":"marks/auto.md"}'),X={name:"marks/auto.md"},Q=Object.assign(X,{setup(W){const l=u([{weight:31,height:1.21,sex:"female"},{weight:170,height:2.21,sex:"male"}]);return y(()=>{E("../data/athletes.csv",c).then(p=>l.value=p)}),(p,G)=>{const k=g("VersionBadge"),a=g("PlotRender");return b(),m("div",null,[o("h1",_,[n("Auto mark "),s(k,{version:"0.6.3"}),n(),F]),v,s(a,{mark:t(e(h),{x:"body_mass_g",y:"flipper_length_mm"}),options:{}},null,8,["mark"]),C,s(a,{mark:t(e(d),{x:"Date",y:"Close"}),options:{}},null,8,["mark"]),f,s(a,{defer:"",mark:t(l.value,{x:"weight"}),options:{}},null,8,["mark"]),q,s(a,{mark:t(e(h),{x:"island"}),options:{}},null,8,["mark"]),T,s(a,{mark:t(e(h),{x:"body_mass_g",y:{reduce:null}}),options:{}},null,8,["mark"]),B,s(a,{defer:"",mark:t(l.value,{x:"weight",y:"height",color:"count"}),options:{}},null,8,["mark"]),x,s(a,{defer:"",mark:t(l.value,{x:"weight",y:"sex",color:"count"}),options:{}},null,8,["mark"]),w,s(a,{mark:t(e(h),{y:"island"}),options:{}},null,8,["mark"]),P,s(a,{mark:t(e(r),{x:"date",y:"unemployed",color:"industry"}),options:{}},null,8,["mark"]),S,s(a,{mark:t(e(r),{x:"date",y:"unemployed",color:"industry",mark:"area"}),options:{}},null,8,["mark"]),A,s(a,{defer:"",mark:t(l.value,{x:"date_of_birth",y:{value:"height",reduce:"mean"},color:"sex",mark:"line"}),options:{color:{legend:!0}}},null,8,["mark"]),j,s(a,{mark:t(e(r),{x:"date",y:{value:"unemployed",zero:!0},color:"industry"}),options:{}},null,8,["mark"]),V,s(a,{mark:t(e(d),{x:"Date",y:"Close",size:"Volume"}),options:{}},null,8,["mark"]),I,s(a,{defer:"",mark:t(e(h),{x:"body_mass_g",y:"culmen_length_mm",fx:"island",fy:"species"}),options:{grid:!0,x:{ticks:5},marginRight:70}},null,8,["mark"]),O,o("h2",D,[n("autoSpec("),N,n(", "),R,n(") "),s(k,{version:"0.6.4"}),n(),Y]),z])}}});export{K as __pageData,Q as default};
