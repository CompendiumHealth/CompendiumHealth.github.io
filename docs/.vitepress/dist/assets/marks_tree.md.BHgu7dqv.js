import{c as g,b as c,bK as k,bL as _}from"./chunks/theme.DAWdUpF4.js";import{J as y,p as u,G as E,c as m,q as s,a as i,L as a,t as o,a6 as e,o as F}from"./chunks/framework.Bev6ATEH.js";const f={id:"tree-mark",tabindex:"-1"},C=s("a",{class:"header-anchor",href:"#tree-mark","aria-label":'Permalink to "Tree mark <VersionBadge version="0.4.3" />"'},"​",-1),b=e('<p>The <strong>tree mark</strong> produces tree diagrams using the <a href="./../transforms/tree">tree transform</a>. It is a <a href="./../features/marks#marks">composite mark</a>, consisting of a <a href="./link">link</a> to render links from parent to child, an optional <a href="./dot">dot</a> for nodes, and one or two <a href="./text">text</a> for node labels. The link mark uses the <a href="./../transforms/tree#treeLink">treeLink transform</a>, while the dot and text marks use the <a href="./../transforms/tree#treeNode">treeNode transform</a>.</p><p>For example, here is a little family tree of Greek gods.</p>',2),v=s("a",{class:"plot-fork no-icon",href:"https://observablehq.com/@observablehq/plot-tree-and-link?intent=fork",target:"_blank",title:"Open on Observable"},"Fork",-1),B={class:"language-js vp-adaptive-theme"},T=s("button",{title:"Copy Code",class:"copy"},null,-1),x=s("span",{class:"lang"},"js",-1),q={class:"shiki shiki-themes github-light github-dark vp-code"},S=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Plot."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plot"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"({")],-1),P=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  axis: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"null"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")],-1),A=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  height: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"100"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")],-1),L=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  margin: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"10"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")],-1),j=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  marginLeft: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"40"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")],-1),w=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  marginRight: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"120"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")],-1),R=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  marks: [")],-1),V={class:"line"},D=s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    Plot.",-1),N=s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tree",-1),I=s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(gods, {textStroke: ",-1),O={style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},G=s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})",-1),J=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  ]")],-1),M=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")],-1),W=s("p",null,[i("Here "),s("code",null,"gods"),i(" is an array of slash-separated paths, similar to paths in a file system. Each path represents the hierarchical position of a node in the tree.")],-1),$={class:"language-js vp-adaptive-theme"},z=s("button",{title:"Copy Code",class:"copy"},null,-1),H=s("span",{class:"lang"},"js",-1),K={class:"shiki shiki-themes github-light github-dark vp-code"},U={class:"line"},Q=s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"gods ",-1),X=s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=",-1),Y={style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},Z=s("p",null,"As a more complete example, here is a visualization of a software package hierarchy.",-1),ss=s("a",{class:"plot-fork no-icon",href:"https://observablehq.com/@observablehq/plot-tree-flare?intent=fork",target:"_blank",title:"Open on Observable"},"Fork",-1),is={class:"language-js vp-adaptive-theme"},ts=s("button",{title:"Copy Code",class:"copy"},null,-1),as=s("span",{class:"lang"},"js",-1),es={class:"shiki shiki-themes github-light github-dark vp-code"},ns=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Plot."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plot"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"({")],-1),hs=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  axis: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"null"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")],-1),ls=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  margin: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"10"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")],-1),rs=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  marginLeft: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"30"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")],-1),os=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  marginRight: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"160"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")],-1),ks=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  width: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"688"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")],-1),ps=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  height: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"1800"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")],-1),Es=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  marks: [")],-1),ds={class:"line"},gs=e('<span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flare, {path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, delimiter: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, textStroke: </span>',7),cs={style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},_s=s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})",-1),ys=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  ]")],-1),us=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")],-1),ms=s("p",null,[i("The "),s("strong",null,"treeLayout"),i(" option specifies the layout algorithm. The tree mark uses the Reingold–Tilford “tidy” tree algorithm, "),s("a",{href:"https://d3js.org/d3-hierarchy/tree",target:"_blank",rel:"noreferrer"},"d3.tree"),i(", by default. The "),s("a",{href:"#cluster"},"cluster"),i(" convenience method sets "),s("strong",null,"treeLayout"),i(" to "),s("a",{href:"https://d3js.org/d3-hierarchy/cluster",target:"_blank",rel:"noreferrer"},"d3.cluster"),i(", aligning the leaf nodes.")],-1),Fs=s("a",{class:"plot-fork no-icon",href:"https://observablehq.com/@observablehq/plot-cluster-flare?intent=fork",target:"_blank",title:"Open on Observable"},"Fork",-1),fs={class:"language-js vp-adaptive-theme"},Cs=s("button",{title:"Copy Code",class:"copy"},null,-1),bs=s("span",{class:"lang"},"js",-1),vs={class:"shiki shiki-themes github-light github-dark vp-code"},Bs=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Plot."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plot"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"({")],-1),Ts=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  axis: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"null"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")],-1),xs=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  margin: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"10"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")],-1),qs=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  marginLeft: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"30"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")],-1),Ss=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  marginRight: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"160"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")],-1),Ps=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  width: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"688"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")],-1),As=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  height: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"2400"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")],-1),Ls=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  marks: [")],-1),js={class:"line"},ws=e('<span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cluster</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flare, {path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, treeSort: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node:height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, delimiter: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, textStroke: </span>',9),Rs={style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},Vs=s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})",-1),Ds=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  ]")],-1),Ns=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")],-1),Is=e(`<p>Here is an example of a custom <strong>treeLayout</strong> implementation, assigning <em>node</em>.x and <em>node</em>.y.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> indent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    root.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eachBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      node.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node.depth;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      node.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This produces an indented tree layout.</p>`,3),Os=e(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-custom-tree-layout?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  axis: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  inset: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  insetRight: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">120</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  round: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  width: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  height: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  marks: Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flare, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    delimiter: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    treeLayout: indent,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    strokeWidth: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    curve: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;step-before&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    textStroke: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;none&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>The tree mark currently does not inform the default layout; you may find it necessary to set the <strong>height</strong> and <strong>margin</strong> <a href="./../features/plots#layout-options">layout options</a> for readability.</p><h2 id="tree-options" tabindex="-1">Tree options <a class="header-anchor" href="#tree-options" aria-label="Permalink to &quot;Tree options&quot;">​</a></h2><p>The following options are supported:</p><ul><li><strong>fill</strong> - the dot and text fill color; defaults to <em>node:internal</em></li><li><strong>stroke</strong> - the link stroke color; inherits <strong>fill</strong> by default</li><li><strong>strokeWidth</strong> - the link stroke width</li><li><strong>strokeOpacity</strong> - the link stroke opacity</li><li><strong>strokeLinejoin</strong> - the link stroke linejoin</li><li><strong>strokeLinecap</strong> - the link stroke linecap</li><li><strong>strokeMiterlimit</strong> - the link stroke miter limit</li><li><strong>strokeDasharray</strong> - the link stroke dash array</li><li><strong>strokeDashoffset</strong> - the link stroke dash offset</li><li><strong>marker</strong> - the link start and end marker</li><li><strong>markerStart</strong> - the link start marker</li><li><strong>markerEnd</strong> - the link end marker</li><li><strong>dot</strong> - if true, whether to render a dot; defaults to false if no link marker</li><li><strong>title</strong> - the text and dot title; defaults to <em>node:path</em></li><li><strong>text</strong> - the text label; defaults to <em>node:name</em></li><li><strong>textStroke</strong> - the text stroke; defaults to <em>white</em></li><li><strong>textLayout</strong> - the text anchoring layout</li><li><strong>dx</strong> - the text horizontal offset; defaults to 6</li><li><strong>dy</strong> - the text vertical offset; defaults to 0</li></ul><p>Any additional <em>options</em> are passed through to the constituent link, dot, and text marks and their corresponding treeLink or treeNode transform.</p>`,7),Gs=s("strong",null,"textLayout",-1),Js=e('<ul><li><em>mirrored</em> - leaf-node labels are left-anchored, and non-leaf nodes right-anchored</li><li><em>normal</em> - all labels are left-anchored</li></ul><p>If the <strong>treeLayout</strong> is d3.tree or d3.cluster, the <strong>textLayout</strong> defaults to <em>mirrored</em>; otherwise it defaults to <em>normal</em>.</p><h2 id="tree" tabindex="-1">tree(<em>data</em>, <em>options</em>) <a class="header-anchor" href="#tree" aria-label="Permalink to &quot;tree(*data*, *options*) {#tree}&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flare, {path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, delimiter: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Returns a new tree mark with the given <em>data</em> and <em>options</em>.</p><h2 id="cluster" tabindex="-1">cluster(<em>data</em>, <em>options</em>) <a class="header-anchor" href="#cluster" aria-label="Permalink to &quot;cluster(*data*, *options*) {#cluster}&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cluster</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flare, {path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, delimiter: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Like <a href="#tree">tree</a>, except sets the <strong>treeLayout</strong> option to <a href="https://d3js.org/d3-hierarchy/cluster" target="_blank" rel="noreferrer">d3.cluster</a>, aligning leaf nodes, and defaults the <strong>textLayout</strong> option to <em>mirrored</em>.</p>',8),Hs=JSON.parse('{"title":"Tree mark","description":"","frontmatter":{},"headers":[],"relativePath":"marks/tree.md","filePath":"marks/tree.md"}'),Ms={name:"marks/tree.md"},Ks=Object.assign(Ms,{setup(Ws){const n=y([{name:"empty"}]),p=["Chaos/Gaia/Mountains","Chaos/Gaia/Pontus","Chaos/Gaia/Uranus","Chaos/Eros","Chaos/Erebus","Chaos/Tartarus"];u(()=>{g("../data/flare.csv",c).then(t=>n.value=t)});function d(){return t=>{t.eachBefore((h,l)=>{h.y=h.depth,h.x=l})}}return(t,h)=>{const l=E("VersionBadge"),r=E("PlotRender");return F(),m("div",null,[s("h1",f,[i("Tree mark "),a(l,{version:"0.4.3"}),i(),C]),b,a(r,{options:{axis:null,height:100,margin:10,marginLeft:40,marginRight:120,marks:[k(p,{textStroke:"var(--vp-c-bg)"})]}},null,8,["options"]),v,s("div",B,[T,x,s("pre",q,[s("code",null,[S,i(`
`),P,i(`
`),A,i(`
`),L,i(`
`),j,i(`
`),w,i(`
`),R,i(`
`),s("span",V,[D,N,I,s("span",O,'"'+o(t.$dark?"black":"white")+'"',1),G]),i(`
`),J,i(`
`),M])])]),W,s("div",$,[z,H,s("pre",K,[s("code",null,[s("span",U,[Q,X,s("span",Y," "+o(JSON.stringify(p,null,2)),1)])])])]),Z,a(r,{defer:"",options:{axis:null,margin:10,marginLeft:30,marginRight:160,width:688,height:1800,marks:[k(n.value,{path:"name",delimiter:".",textStroke:"var(--vp-c-bg)"})]}},null,8,["options"]),ss,s("div",is,[ts,as,s("pre",es,[s("code",null,[ns,i(`
`),hs,i(`
`),ls,i(`
`),rs,i(`
`),os,i(`
`),ks,i(`
`),ps,i(`
`),Es,i(`
`),s("span",ds,[gs,s("span",cs,'"'+o(t.$dark?"black":"white")+'"',1),_s]),i(`
`),ys,i(`
`),us])])]),ms,a(r,{options:{axis:null,margin:10,marginLeft:30,marginRight:160,width:688,height:2400,marks:[_(n.value,{path:"name",treeSort:"node:height",delimiter:".",textStroke:"var(--vp-c-bg)"})]}},null,8,["options"]),Fs,s("div",fs,[Cs,bs,s("pre",vs,[s("code",null,[Bs,i(`
`),Ts,i(`
`),xs,i(`
`),qs,i(`
`),Ss,i(`
`),Ps,i(`
`),As,i(`
`),Ls,i(`
`),s("span",js,[ws,s("span",Rs,'"'+o(t.$dark?"black":"white")+'"',1),Vs]),i(`
`),Ds,i(`
`),Ns])])]),Is,a(r,{defer:"",options:{axis:null,inset:10,insetRight:120,round:!0,width:200,height:3600,marks:k(n.value,{path:"name",delimiter:".",treeLayout:d,strokeWidth:1,curve:"step-before",textStroke:"none"})}},null,8,["options"]),Os,s("p",null,[i("The "),Gs,i(" option "),a(l,{version:"0.6.9"}),i(" controls how text labels are anchored to the node. Two layouts are supported:")]),Js])}}});export{Hs as __pageData,Ks as default};
