import{bC as h,bD as d,e as p,bE as a,t as g}from"./chunks/theme.DAWdUpF4.js";import{G as i,c,q as e,a as n,L as r,t as k,a6 as s,o as m}from"./chunks/framework.Bev6ATEH.js";const f={id:"tree-transform",tabindex:"-1"},u=e("a",{class:"header-anchor",href:"#tree-transform","aria-label":'Permalink to "Tree transform <VersionBadge version="0.4.3" />"'},"​",-1),E=s('<p>The <strong>tree transform</strong> is rarely used directly; the two variants, <a href="#treeNode">treeNode</a> and <a href="#treeLink">treeLink</a>, are typically used internally by the composite <a href="./../marks/tree">tree mark</a>. The tree transform arranges a tabular dataset into a hierarchy according to the given <strong>path</strong> channel, which is typically a slash-separated string; it then executes a tree layout algorithm to compute <strong>x</strong> and <strong>y</strong>; these channels can then be used to construct a node-link diagram.</p><p>As a contrived example, we can construct the equivalent of the tree mark using a <a href="./../marks/link">link</a>, <a href="./../marks/dot">dot</a>, and <a href="./../marks/text">text</a>, and the corresponding tree transforms.</p>',2),y=s(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-tree-and-link?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  axis: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  height: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  margin: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  marginRight: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">120</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  marks: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gods, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">treeLink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gods, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">treeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gods, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">treeNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node:name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dx: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Here <code>gods</code> is an array of slash-separated paths, similar to paths in a file system. Each path represents the hierarchical position of a node in the tree.</p>`,3),_={class:"language-js vp-adaptive-theme"},b=e("button",{title:"Copy Code",class:"copy"},null,-1),v=e("span",{class:"lang"},"js",-1),T={class:"shiki shiki-themes github-light github-dark vp-code"},w={class:"line"},C=e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"gods ",-1),x=e("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=",-1),F={style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},P=s('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Given a text file, you can use <code>text.split(&quot;\\n&quot;)</code> to split the contents into multiple lines.</p></div><h2 id="tree-options" tabindex="-1">Tree options <a class="header-anchor" href="#tree-options" aria-label="Permalink to &quot;Tree options&quot;">​</a></h2><p>The following options control how the tabular data is organized into a hierarchy:</p><ul><li><strong>path</strong> - a column specifying each node’s hierarchy location; defaults to identity</li><li><strong>delimiter</strong> - the path separator, a single character; defaults to forward slash (/)</li></ul><p>The <strong>path</strong> column is typically slash-separated, as with UNIX-based file systems or URLs.</p><p>The following options control how the node-link diagram is laid out:</p><ul><li><strong>treeLayout</strong> - a tree layout algorithm; defaults to <a href="https://d3js.org/d3-hierarchy/tree" target="_blank" rel="noreferrer">d3.tree</a></li><li><strong>treeAnchor</strong> - a tree layout orientation, either <em>left</em> or <em>right</em>; defaults to <em>left</em></li><li><strong>treeSort</strong> - a node comparator, or null to preserve input order</li><li><strong>treeSeparation</strong> - a node separation function, or null for uniform separation</li></ul><p>The default <strong>treeLayout</strong> implements the Reingold–Tilford “tidy” algorithm based on Buchheim <em>et al.</em>’s linear time approach. Use <a href="https://d3js.org/d3-hierarchy/cluster" target="_blank" rel="noreferrer">d3.cluster</a> instead to align leaf nodes; see also the <a href="./../marks/tree#cluster">cluster mark</a>.</p><p>If <strong>treeAnchor</strong> is <em>left</em>, the root of the tree will be aligned with the left side of the frame; if <strong>treeAnchor</strong> is <em>right</em>, the root of the tree will be aligned with the right side of the frame; use the <strong>insetLeft</strong> and <strong>insetRight</strong> <a href="./../features/scales">scale options</a> if horizontal padding is desired, say to make room for labels.</p><p>If the <strong>treeSort</strong> option is not null, it is typically a function that is passed two nodes in the hierarchy and compares them, similar to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank" rel="noreferrer"><em>array</em>.sort</a>; see <a href="https://d3js.org/d3-hierarchy/hierarchy#node_sort" target="_blank" rel="noreferrer">d3-hierarchy’s <em>node</em>.sort</a> for more. The <strong>treeSort</strong> option can also be specified as a string, in which case it refers either to a named column in data, or if it starts with “node:”, a node value.</p><p>If the <strong>treeSeparation</strong> is not null, it is a function that is passed two nodes in the hierarchy and returns the desired (relative) amount of separation; see <a href="https://d3js.org/d3-hierarchy/tree#tree_separation" target="_blank" rel="noreferrer">d3-hierarchy’s <em>tree</em>.separation</a> for more. By default, non-siblings are at least twice as far apart as siblings.</p><h2 id="treeNode" tabindex="-1">treeNode(<em>options</em>) <a class="header-anchor" href="#treeNode" aria-label="Permalink to &quot;treeNode(*options*) {#treeNode}&quot;">​</a></h2><p>Populates <strong>x</strong> and <strong>y</strong> with the positions for each node in the tree. The default <strong>frameAnchor</strong> inherits the <strong>treeAnchor</strong>. This transform is often used with the <a href="./../marks/dot">dot</a> or <a href="./../marks/text">text</a> mark.</p><p>The treeNode transform will derive output columns for any <em>options</em> that have one of the following named node values:</p><ul><li><em>node:name</em> - the node’s name (the last part of its path)</li><li><em>node:path</em> - the node’s full, normalized, slash-separated path</li><li><em>node:internal</em> - true if the node is internal, or false for leaves</li><li><em>node:external</em> - true if the node is a leaf, or false for internal nodes</li><li><em>node:depth</em> - the distance from the node to the root</li><li><em>node:height</em> - the distance from the node to its deepest descendant</li></ul><p>In addition, if any option value is specified as an object with a <strong>node</strong> method, a derived output column will be generated by invoking the <strong>node</strong> method for each node in the tree.</p><h2 id="treeLink" tabindex="-1">treeLink(<em>options</em>) <a class="header-anchor" href="#treeLink" aria-label="Permalink to &quot;treeLink(*options*) {#treeLink}&quot;">​</a></h2><p>Populates <strong>x1</strong>, <strong>y1</strong>, <strong>x2</strong>, and <strong>y2</strong> with the positions for each link in the tree, where <strong>x1</strong> &amp; <strong>y1</strong> represents the position of the parent node and <strong>x2</strong> &amp; <strong>y2</strong> the position of the child node. The default <strong>curve</strong> is <em>bump-x</em>, the default <strong>stroke</strong> is #555, the default <strong>strokeWidth</strong> is 1.5, and the default <strong>strokeOpacity</strong> is 0.5. This transform is often used with the <a href="./../marks/link">link</a> or <a href="./../marks/arrow">arrow</a> mark.</p><p>The treeLink transform will likewise derive output columns for any <em>options</em> that have one of the following named link values:</p><ul><li><em>node:name</em> - the child node’s name (the last part of its path)</li><li><em>node:path</em> - the child node’s full, normalized, slash-separated path</li><li><em>node:internal</em> - true if the child node is internal, or false for leaves</li><li><em>node:external</em> - true if the child node is a leaf, or false for internal nodes</li><li><em>node:depth</em> - the distance from the child node to the root</li><li><em>node:height</em> - the distance from the child node to its deepest descendant</li><li><em>parent:name</em> - the parent node’s name (the last part of its path)</li><li><em>parent:path</em> - the parent node’s full, normalized, slash-separated path</li><li><em>parent:depth</em> - the distance from the parent node to the root</li><li><em>parent:height</em> - the distance from the parent node to its deepest descendant</li></ul><p>In addition, if any option value is specified as an object with a <strong>node</strong> method, a derived output column will be generated by invoking the <strong>node</strong> method for each child node in the tree; likewise if any option value is specified as an object with a <strong>link</strong> method, a derived output column will be generated by invoking the <strong>link</strong> method for each link in the tree, being passed two node arguments, the child and the parent.</p>',21),j=JSON.parse('{"title":"Tree transform","description":"","frontmatter":{},"headers":[],"relativePath":"transforms/tree.md","filePath":"transforms/tree.md"}'),B={name:"transforms/tree.md"},I=Object.assign(B,{setup(N){const t=["Chaos/Gaia/Mountains","Chaos/Gaia/Pontus","Chaos/Gaia/Uranus","Chaos/Eros","Chaos/Erebus","Chaos/Tartarus"];return(S,A)=>{const o=i("VersionBadge"),l=i("PlotRender");return m(),c("div",null,[e("h1",f,[n("Tree transform "),r(o,{version:"0.4.3"}),n(),u]),E,r(l,{options:{axis:null,height:100,margin:20,marginRight:120,marks:[h(t,d()),p(t,a()),g(t,a({text:"node:name",dx:6}))]}},null,8,["options"]),y,e("div",_,[b,v,e("pre",T,[e("code",null,[e("span",w,[C,x,e("span",F," "+k(JSON.stringify(t,null,2)),1)])])])]),P])}}});export{j as __pageData,I as default};
