import{A as y,b as m,z as _,bc as E,f as F,e as o,bd as k,be as b,bf as f,bg as v,B as C}from"./chunks/theme.DAWdUpF4.js";import{f as q}from"./chunks/feature.DXDMwmIR.js";import{p as i}from"./chunks/penguins.C-n8z74Q.js";import{J as d,m as B,p as T,G as g,c as x,q as s,a as n,L as e,s as a,t as P,a6 as t,o as w}from"./chunks/framework.Bev6ATEH.js";const V={id:"delaunay-marks",tabindex:"-1"},A=s("a",{class:"header-anchor",href:"#delaunay-marks","aria-label":'Permalink to "Delaunay marks <VersionBadge version="0.5.1" />"'},"â€‹",-1),S=t('<p>Given set of points in <strong>x</strong> and <strong>y</strong>, the <strong>Delaunay marks</strong> compute the <a href="https://en.wikipedia.org/wiki/Delaunay_triangulation" target="_blank" rel="noreferrer">Delaunay triangulation</a>, its dual the <a href="https://en.wikipedia.org/wiki/Voronoi_diagram" target="_blank" rel="noreferrer">Voronoi tessellation</a>, and the <a href="https://en.wikipedia.org/wiki/Convex_hull" target="_blank" rel="noreferrer">convex hull</a>.</p><p>The <a href="#voronoi">voronoi mark</a> computes the region closest to each point (its <em>Voronoi cell</em>). The cell can be empty if another point shares the exact same coordinates. Together, the cells cover the entire plot. Voronoi diagrams can group related points with color, for example.</p>',2),D=s("a",{class:"plot-fork no-icon",href:"https://observablehq.com/@observablehq/plot-voronoi-scatterplot?intent=fork",target:"_blank",title:"Open on Observable"},"Fork",-1),j={class:"language-js vp-adaptive-theme"},O=s("button",{title:"Copy Code",class:"copy"},null,-1),I=s("span",{class:"lang"},"js",-1),M={class:"shiki shiki-themes github-light github-dark vp-code"},N=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Plot."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plot"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"({")],-1),z=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  color: {legend: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"true"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"},")],-1),R=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  marks: [")],-1),W={class:"line"},L=t('<span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">voronoi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_depth_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_length_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;species&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fillOpacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, stroke: </span>',11),U={style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},G=s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}),",-1),J=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    Plot."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"frame"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(),")],-1),$=t('<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_depth_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_length_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;species&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>',1),H=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  ]")],-1),K=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")],-1),Q=t('<p>Each cell is associated with a particular data point, and channels such as <strong>stroke</strong>, <strong>fill</strong>, <strong>fillOpacity</strong>, <strong>strokeOpacity</strong>, <strong>href</strong>, <em>etc.</em>, work as they do on other marks, such as <a href="./dot">dots</a>.</p><p>To show the local density of a scatterplot, one can draw the whole boundary at once with <a href="#voronoiMesh">voronoiMesh</a>. Whereas the <a href="#voronoi">voronoi mark</a> will draw shared cell boundaries twice, the mesh will draw them only once.</p>',2),X=t(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-voronoi-mesh?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  marks: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">voronoiMesh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_depth_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_length_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_depth_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_length_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;species&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>The boundary between two neighboring Voronoi cells is a line segment defined by equal distance from their two respective points. The construction of the Voronoi diagram involves the computation of the Delaunay graph, which defines these neighbors. Use <a href="#delaunayMesh">delaunayMesh</a> to draw the graph.</p>`,3),Y=t(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-delaunay-mesh?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  marks: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delaunayMesh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_depth_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_length_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, z: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;species&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, stroke: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;species&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strokeOpacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_depth_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_length_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;species&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>As shown above, the Delaunay graph is computed separately for each color; specifying <strong>z</strong>, <strong>stroke</strong>, or <strong>fill</strong> creates independent series.</p><p>Another derivative of the Delaunay graph is the convex hull of a set of points: the polygon with the minimum perimeter that contains all the points. The <a href="#hull">hull mark</a> will draw this hull.</p>`,4),Z=t(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-convex-hull?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  marks: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_depth_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_length_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;species&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fillOpacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_depth_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_length_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, stroke: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;species&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Using independent series is not recommended in the case of the voronoi and voronoiMesh marks as it will result in an unreadable chart due to overlapping Voronoi diagrams, but it can be useful to color the links of the Delaunay graph based on some property of data, such as the body mass of penguins below.</p>`,3),ss=t(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-delaunay-links?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  color: {legend: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  marks: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delaunayLink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_depth_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_length_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, stroke: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;body_mass_g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strokeWidth: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><p>The link color is driven by one arbitrary extremity of each edge; this might change in the future.</p></div><p>The Delaunay marks can be one-dimensional, too.</p>`,4),is=t(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-one-dimensional-voronoi?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  marks: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">voronoi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;body_mass_g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;species&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">voronoiMesh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;body_mass_g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, stroke: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;white&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strokeOpacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>The <a href="./../marks/delaunay">Delaunay marks</a> also work with Plotâ€™s <a href="./../features/projections">projection system</a>, as in this Voronoi diagram showing the distribution of Walmart stores in the contiguous United States.</p>`,3),as=t(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-walmart-voronoi?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  projection: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;albers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  marks: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">geo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nation),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(walmarts, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;longitude&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;latitude&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;currentColor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, r: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">voronoiMesh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(walmarts, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;longitude&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;latitude&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><p>Distances between projected points are not exactly proportional to the corresponding distances on the sphere. This <a href="https://observablehq.com/@observablehq/planar-vs-spherical-voronoi" target="_blank" rel="noreferrer">creates a discrepancy</a> between the planar Voronoi diagram and its spherical counterpart. For greater accuracy, use <a href="https://github.com/Fil/d3-geo-voronoi" target="_blank" rel="noreferrer">d3-geo-voronoi</a> with the <a href="./../marks/geo">geo mark</a>.</p></div><h2 id="delaunayLink" tabindex="-1">delaunayLink(<em>data</em>, <em>options</em>) <a class="header-anchor" href="#delaunayLink" aria-label="Permalink to &quot;delaunayLink(*data*, *options*) {#delaunayLink}&quot;">â€‹</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delaunayLink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_depth_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_length_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Draws links for each edge of the Delaunay triangulation of the points given by the <strong>x</strong> and <strong>y</strong> channels. Supports the same options as the <a href="./link">link mark</a>, except that <strong>x1</strong>, <strong>y1</strong>, <strong>x2</strong>, and <strong>y2</strong> are derived automatically from <strong>x</strong> and <strong>y</strong>. When an aesthetic channel is specified (such as <strong>stroke</strong> or <strong>strokeWidth</strong>), the link inherits the corresponding channel value from one of its two endpoints arbitrarily.</p><p>If a <strong>z</strong> channel is specified, the input points are grouped by <em>z</em>, and separate Delaunay triangulations are constructed for each group.</p><h2 id="delaunayMesh" tabindex="-1">delaunayMesh(<em>data</em>, <em>options</em>) <a class="header-anchor" href="#delaunayMesh" aria-label="Permalink to &quot;delaunayMesh(*data*, *options*) {#delaunayMesh}&quot;">â€‹</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delaunayMesh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_depth_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_length_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Draws a mesh of the Delaunay triangulation of the points given by the <strong>x</strong> and <strong>y</strong> channels. The <strong>stroke</strong> option defaults to <em>currentColor</em>, and the <strong>strokeOpacity</strong> defaults to 0.2. The <strong>fill</strong> option is not supported. When an aesthetic channel is specified (such as <strong>stroke</strong> or <strong>strokeWidth</strong>), the mesh inherits the corresponding channel value from one of its constituent points arbitrarily.</p><p>If a <strong>z</strong> channel is specified, the input points are grouped by <em>z</em>, and separate Delaunay triangulations are constructed for each group.</p><h2 id="hull" tabindex="-1">hull(<em>data</em>, <em>options</em>) <a class="header-anchor" href="#hull" aria-label="Permalink to &quot;hull(*data*, *options*) {#hull}&quot;">â€‹</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_depth_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_length_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Draws a convex hull around the points given by the <strong>x</strong> and <strong>y</strong> channels. The <strong>stroke</strong> option defaults to <em>currentColor</em> and the <strong>fill</strong> option defaults to <em>none</em>. When an aesthetic channel is specified (such as <strong>stroke</strong> or <strong>strokeWidth</strong>), the hull inherits the corresponding channel value from one of its constituent points arbitrarily.</p><p>If a <strong>z</strong> channel is specified, the input points are grouped by <em>z</em>, and separate convex hulls are constructed for each group. If the <strong>z</strong> channel is not specified, it defaults to either the <strong>fill</strong> channel, if any, or the <strong>stroke</strong> channel, if any.</p><h2 id="voronoi" tabindex="-1">voronoi(<em>data</em>, <em>options</em>) <a class="header-anchor" href="#voronoi" aria-label="Permalink to &quot;voronoi(*data*, *options*) {#voronoi}&quot;">â€‹</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">voronoi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_depth_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_length_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Draws polygons for each cell of the Voronoi tessellation of the points given by the <strong>x</strong> and <strong>y</strong> channels.</p><p>If a <strong>z</strong> channel is specified, the input points are grouped by <em>z</em>, and separate Voronoi tessellations are constructed for each group.</p><h2 id="voronoiMesh" tabindex="-1">voronoiMesh(<em>data</em>, <em>options</em>) <a class="header-anchor" href="#voronoiMesh" aria-label="Permalink to &quot;voronoiMesh(*data*, *options*) {#voronoiMesh}&quot;">â€‹</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">voronoiMesh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(penguins, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_depth_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;culmen_length_mm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Draws a mesh for the cell boundaries of the Voronoi tessellation of the points given by the <strong>x</strong> and <strong>y</strong> channels. The <strong>stroke</strong> option defaults to <em>currentColor</em>, and the <strong>strokeOpacity</strong> defaults to 0.2. The <strong>fill</strong> option is not supported. When an aesthetic channel is specified (such as <strong>stroke</strong> or <strong>strokeWidth</strong>), the mesh inherits the corresponding channel value from one of its constituent points arbitrarily.</p><p>If a <strong>z</strong> channel is specified, the input points are grouped by <em>z</em>, and separate Voronoi tessellations are constructed for each group.</p>`,23),rs=JSON.parse('{"title":"Delaunay marks","description":"","frontmatter":{},"headers":[],"relativePath":"marks/delaunay.md","filePath":"marks/delaunay.md"}'),ts={name:"marks/delaunay.md"},ks=Object.assign(ts,{setup(ns){const r=d([]),p=d(null),c=B(()=>p.value?q(p.value,p.value.objects.nation):{type:null});return T(()=>{y("../data/walmarts.tsv",m).then(h=>r.value=h),_("../data/us-counties-10m.json").then(h=>p.value=h)}),(h,es)=>{const u=g("VersionBadge"),l=g("PlotRender");return w(),x("div",null,[s("h1",V,[n("Delaunay marks "),e(u,{version:"0.5.1"}),n(),A]),S,e(l,{options:{color:{legend:!0},marks:[E(a(i),{x:"culmen_depth_mm",y:"culmen_length_mm",fill:"species",fillOpacity:.2,stroke:"var(--vp-c-bg)"}),F(),o(a(i),{x:"culmen_depth_mm",y:"culmen_length_mm",fill:"species"})]}},null,8,["options"]),D,s("div",j,[O,I,s("pre",M,[s("code",null,[N,n(`
`),z,n(`
`),R,n(`
`),s("span",W,[L,s("span",U,'"'+P(h.$dark?"black":"white")+'"',1),G]),n(`
`),J,n(`
`),$,n(`
`),H,n(`
`),K])])]),Q,e(l,{options:{marks:[k(a(i),{x:"culmen_depth_mm",y:"culmen_length_mm"}),o(a(i),{x:"culmen_depth_mm",y:"culmen_length_mm",fill:"species"})]}},null,8,["options"]),X,e(l,{options:{marks:[b(a(i),{x:"culmen_depth_mm",y:"culmen_length_mm",z:"species",stroke:"species",strokeOpacity:.5}),o(a(i),{x:"culmen_depth_mm",y:"culmen_length_mm",fill:"species"})]}},null,8,["options"]),Y,e(l,{defer:"",options:{marks:[f(a(i),{x:"culmen_depth_mm",y:"culmen_length_mm",fill:"species",fillOpacity:.2}),o(a(i),{x:"culmen_depth_mm",y:"culmen_length_mm",stroke:"species"})]}},null,8,["options"]),Z,e(l,{defer:"",options:{color:{legend:!0},marks:[v(a(i),{x:"culmen_depth_mm",y:"culmen_length_mm",stroke:"body_mass_g",strokeWidth:1.5})]}},null,8,["options"]),ss,e(l,{defer:"",options:{marks:[E(a(i),{x:"body_mass_g",fill:"species"}),k(a(i),{x:"body_mass_g",stroke:"white",strokeOpacity:1})]}},null,8,["options"]),is,e(l,{defer:"",options:{projection:"albers",marks:[C(c.value),o(r.value,{x:"longitude",y:"latitude",fill:"currentColor",r:1}),k(r.value,{x:"longitude",y:"latitude"})]}},null,8,["options"]),as])}}});export{rs as __pageData,ks as default};
