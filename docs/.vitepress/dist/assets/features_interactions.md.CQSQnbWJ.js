import{c as r,b as o,e as i,v as l}from"./chunks/theme.DAWdUpF4.js";import{J as h,p,G as k,c,L as n,a6 as a,o as d}from"./chunks/framework.Bev6ATEH.js";const u=a('<h1 id="interactions" tabindex="-1">Interactions <a class="header-anchor" href="#interactions" aria-label="Permalink to &quot;Interactions&quot;">​</a></h1><p>Interaction allows reading values out of a plot (details on demand), or fluidly changing a view of data without editing code (zoom and filter). There are a variety of ways to achieve interaction with Plot, including built-in interaction features and development techniques with frameworks such as Observable and React.</p><h2 id="pointing" tabindex="-1">Pointing <a class="header-anchor" href="#pointing" aria-label="Permalink to &quot;Pointing&quot;">​</a></h2><p>When looking at a scatterplot, the reader may wonder, <em>what abstract values does this dot represent?</em></p><p>The <a href="./../interactions/pointer">pointer transform</a> can provide an answer: it dynamically <a href="./../transforms/filter">filters</a> a mark such that only the data closest to the pointer (such as the mouse) is rendered. The pointer transform is often paired with the <a href="./../marks/tip">tip mark</a> for interactive tooltips, revealing exact values as the pointer moves over the plot. The tip can show additional fields not otherwise visible, such as the <em>name</em> and <em>sport</em> of Olympic athletes below.</p>',5),g=a(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/scatterplot-with-interactive-tips?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  stroke: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  channels: {name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sport: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sport&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tip: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>The <a href="./../interactions/crosshair">crosshair mark</a> uses the pointer transform internally to display a <a href="./../marks/rule">rule</a> and a <a href="./../marks/text">text</a> showing the <strong>x</strong> (horizontal↔︎ position) and <strong>y</strong> (vertical↕︎ position) value of the nearest data.</p>`,3),E=a(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-crosshair?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  marks: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, stroke: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crosshair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;height&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>These values are displayed atop the axes on the edge of the frame; unlike the tip mark, the crosshair mark will not obscure other marks in the plot.</p><h2 id="selecting" tabindex="-1">Selecting <a class="header-anchor" href="#selecting" aria-label="Permalink to &quot;Selecting&quot;">​</a></h2><p>Support for selecting points within a plot through direct manipulation is under development. If you are interested in this feature, please upvote <a href="https://github.com/observablehq/plot/issues/5" target="_blank" rel="noreferrer">#5</a>. See <a href="https://github.com/observablehq/plot/pull/721" target="_blank" rel="noreferrer">#721</a> for some early work on brushing.</p><h2 id="zooming" tabindex="-1">Zooming <a class="header-anchor" href="#zooming" aria-label="Permalink to &quot;Zooming&quot;">​</a></h2><p>Support for interactive panning and zooming is planned for a future release. If you are interested in this feature, please upvote <a href="https://github.com/observablehq/plot/issues/1590" target="_blank" rel="noreferrer">#1590</a>.</p><h2 id="animation" tabindex="-1">Animation <a class="header-anchor" href="#animation" aria-label="Permalink to &quot;Animation&quot;">​</a></h2><p>Support for declarative animation is planned for a future release. If you are interested in this feature, please upvote <a href="https://github.com/observablehq/plot/issues/166" target="_blank" rel="noreferrer">#166</a>. See <a href="https://github.com/observablehq/plot/pull/995" target="_blank" rel="noreferrer">#995</a> for some early work on a <strong>time</strong> channel.</p><h2 id="custom-reactivity" tabindex="-1">Custom reactivity <a class="header-anchor" href="#custom-reactivity" aria-label="Permalink to &quot;Custom reactivity&quot;">​</a></h2><p>With the exception of render transforms (see the <a href="https://github.com/observablehq/plot/blob/main/src/interactions/pointer.js" target="_blank" rel="noreferrer">pointer transform</a> implementation), Plot does not currently provide incremental re-rendering (partial updates to previously-rendered plots) or animated transitions between views.</p><p>That said, you can simply throw away an old plot and replace it with a new one! This allows plotting of dynamic data: data which can change in real-time as it streams in, or because it is derived in response to external inputs such as range sliders and search boxes.</p><p>On Observable, you can use <a href="https://observablehq.com/@observablehq/views" target="_blank" rel="noreferrer">viewof</a> in conjunction with <a href="https://observablehq.com/@observablehq/inputs" target="_blank" rel="noreferrer">Observable Inputs</a> (or other plots!) for interactivity. If your cell references another cell, it will automatically re-run whenever the upstream cell’s value changes. For example, try dragging the slider in this <a href="https://observablehq.com/@observablehq/plot-hexbin-binwidth?intent=fork" target="_blank" rel="noreferrer">hexbin example</a>. In React, use <a href="https://react.dev/reference/react/useEffect" target="_blank" rel="noreferrer">useEffect</a> and <a href="https://react.dev/reference/react/useRef" target="_blank" rel="noreferrer">useRef</a> to re-render the plot when data changes. In Vue, use <a href="https://vuejs.org/api/reactivity-core.html#ref" target="_blank" rel="noreferrer">ref</a>. For more, see our <a href="./../getting-started">getting started guide</a>.</p><p>You can also manipulate the SVG that Plot creates, if you are comfortable using lower-level APIs; see examples by <a href="https://observablehq.com/@mkfreeman/plot-animation" target="_blank" rel="noreferrer">Mike Freeman</a> and <a href="https://observablehq.com/@fil/plot-animate-a-bar-chart" target="_blank" rel="noreferrer">Philippe Rivière</a>.</p>`,14),_=JSON.parse('{"title":"Interactions","description":"","frontmatter":{},"headers":[],"relativePath":"features/interactions.md","filePath":"features/interactions.md"}'),m={name:"features/interactions.md"},q=Object.assign(m,{setup(f){const e=h([{weight:31,height:1.21,sex:"female"},{weight:170,height:2.21,sex:"male"}]);return p(()=>{r("../data/athletes.csv",o).then(t=>e.value=t)}),(t,b)=>{const s=k("PlotRender");return d(),c("div",null,[u,n(s,{defer:"",mark:i(e.value,{x:"weight",y:"height",stroke:"sex",channels:{name:"name",sport:"sport"},tip:!0}),options:{}},null,8,["mark"]),g,n(s,{defer:"",options:{marks:[i(e.value,{x:"weight",y:"height",stroke:"sex"}),l(e.value,{x:"weight",y:"height"})]}},null,8,["options"]),E])}}});export{_ as __pageData,q as default};
