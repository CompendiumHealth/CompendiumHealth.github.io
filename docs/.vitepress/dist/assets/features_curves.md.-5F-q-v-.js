import{k as d,G as l,c as u,q as e,a as i,w as _,a7 as k,L as r,s as c,t as g,a6 as s,o as b}from"./chunks/framework.Bev6ATEH.js";import{r as f,l as E,a as v,d as y}from"./chunks/theme.DAWdUpF4.js";const T=s('<h1 id="curves" tabindex="-1">Curves <a class="header-anchor" href="#curves" aria-label="Permalink to &quot;Curves&quot;">​</a></h1><p>A <strong>curve</strong> defines how to turn a discrete representation of a line as a sequence of points [[<em>x₀</em>, <em>y₀</em>], [<em>x₁</em>, <em>y₁</em>], [<em>x₂</em>, <em>y₂</em>], …] into a continuous path; <em>i.e.</em>, how to interpolate between points. Curves are used by the <a href="./../marks/line">line</a>, <a href="./../marks/area">area</a>, and <a href="./../marks/link">link</a> marks, and are implemented by <a href="https://d3js.org/d3-shape/curve" target="_blank" rel="noreferrer">d3-shape</a>.</p>',2),C={class:"label-input"},w=s("<option>basis</option><option>basis-open</option><option>basis-closed</option><option>bump-x</option><option>bump-y</option><option>bundle</option><option>cardinal</option><option>cardinal-open</option><option>cardinal-closed</option><option>catmull-rom</option><option>catmull-rom-open</option><option>catmull-rom-closed</option><option>linear</option><option>linear-closed</option><option>monotone-x</option><option>monotone-y</option><option>natural</option><option>step</option><option>step-after</option><option>step-before</option>",20),A=[w],S=e("a",{class:"plot-fork no-icon",href:"https://observablehq.com/@observablehq/plot-curve-option?intent=fork",target:"_blank",title:"Open on Observable"},"Fork",-1),x={class:"language-js vp-adaptive-theme"},F=e("button",{title:"Copy Code",class:"copy"},null,-1),P=e("span",{class:"lang"},"js",-1),V={class:"shiki shiki-themes github-light github-dark vp-code"},B=e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Plot."),e("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plot"),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"({")],-1),j=e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  marks: [")],-1),R={class:"line"},I=e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    Plot.",-1),D=e("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"lineY",-1),N=e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(numbers, {curve: ",-1),q={style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},O=e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}),",-1),Y=s('<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(numbers, {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i})</span></span>',1),z=e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  ]")],-1),G=e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")],-1),J=e("p",null,"The supported curve options are:",-1),L=e("ul",null,[e("li",null,[e("strong",null,"curve"),i(" - the curve method, either a string or a function")]),e("li",null,[e("strong",null,"tension"),i(" - the curve tension (for fine-tuning)")])],-1),M=e("p",null,"The following named curve methods are supported:",-1),U=s("<li><em>basis</em> - a cubic basis spline (repeating the end points)</li><li><em>basis-open</em> - an open cubic basis spline</li><li><em>basis-closed</em> - a closed cubic basis spline</li><li><em>bump-x</em> - a Bézier curve with horizontal tangents</li><li><em>bump-y</em> - a Bézier curve with vertical tangents</li><li><em>bundle</em> - a straightened cubic basis spline (suitable for lines only, not areas)</li><li><em>cardinal</em> - a cubic cardinal spline (with one-sided differences at the ends)</li><li><em>cardinal-open</em> - an open cubic cardinal spline</li><li><em>cardinal-closed</em> - an closed cubic cardinal spline</li><li><em>catmull-rom</em> - a cubic Catmull–Rom spline (with one-sided differences at the ends)</li><li><em>catmull-rom-open</em> - an open cubic Catmull–Rom spline</li><li><em>catmull-rom-closed</em> - a closed cubic Catmull–Rom spline</li><li><em>linear</em> - a piecewise linear curve (<em>i.e.</em>, straight line segments)</li><li><em>linear-closed</em> - a closed piecewise linear curve (<em>i.e.</em>, straight line segments)</li><li><em>monotone-x</em> - a cubic spline that preserves monotonicity in <em>x</em></li><li><em>monotone-y</em> - a cubic spline that preserves monotonicity in <em>y</em></li><li><em>natural</em> - a natural cubic spline</li><li><em>step</em> - a piecewise constant function where <em>y</em> changes at the midpoint of <em>x</em></li><li><em>step-after</em> - a piecewise constant function where <em>y</em> changes after <em>x</em></li><li><em>step-before</em> - a piecewise constant function where <em>x</em> changes after <em>y</em></li>",20),H=e("em",null,"auto",-1),K=e("em",null,"linear",-1),Q=e("a",{href:"./projections"},"projection",-1),W=s('<p>If <strong>curve</strong> is a function, it will be invoked with a given <em>context</em> in the same fashion as a <a href="https://d3js.org/d3-shape/curve#custom-curves" target="_blank" rel="noreferrer">D3 curve factory</a>. The <em>auto</em> curve is only available for the <a href="./../marks/line">line mark</a> and <a href="./../marks/link">link mark</a> and is typically used in conjunction with a spherical <a href="./projections">projection</a> to interpolate along <a href="https://en.wikipedia.org/wiki/Geodesic" target="_blank" rel="noreferrer">geodesics</a>.</p><p>The tension option only has an effect on bundle, cardinal and Catmull–Rom splines (<em>bundle</em>, <em>cardinal</em>, <em>cardinal-open</em>, <em>cardinal-closed</em>, <em>catmull-rom</em>, <em>catmull-rom-open</em>, and <em>catmull-rom-closed</em>). For bundle splines, it corresponds to <a href="https://d3js.org/d3-shape/curve#curveBundle_beta" target="_blank" rel="noreferrer">beta</a>; for cardinal splines, <a href="https://d3js.org/d3-shape/curve#curveCardinal_tension" target="_blank" rel="noreferrer">tension</a>; for Catmull–Rom splines, <a href="https://d3js.org/d3-shape/curve#curveCatmullRom_alpha" target="_blank" rel="noreferrer">alpha</a>.</p>',2),se=JSON.parse('{"title":"Curves","description":"","frontmatter":{},"headers":[],"relativePath":"features/curves.md","filePath":"features/curves.md"}'),X={name:"features/curves.md"},te=Object.assign(X,{setup(Z){const t=d("catmull-rom"),n=f(20).map(E(42));return($,a)=>{const p=l("PlotRender"),h=l("VersionBadge");return b(),u("div",null,[T,e("p",null,[e("label",C,[i(" Curve: "),_(e("select",{"onUpdate:modelValue":a[0]||(a[0]=o=>t.value=o)},A,512),[[k,t.value]])])]),r(p,{options:{marks:[v(c(n),{curve:t.value}),y(c(n),{x:(o,m)=>m})]}},null,8,["options"]),S,e("div",x,[F,P,e("pre",V,[e("code",null,[B,i(`
`),j,i(`
`),e("span",R,[I,D,N,e("span",q,'"'+g(t.value)+'"',1),O]),i(`
`),Y,i(`
`),z,i(`
`),G])])]),J,L,M,e("ul",null,[U,e("li",null,[H,i(" - like "),K,i(", but use the (possibly spherical) "),Q,i(", if any "),r(h,{version:"0.6.1"})])]),W])}}});export{se as __pageData,te as default};
