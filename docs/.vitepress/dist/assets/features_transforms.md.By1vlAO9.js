import{s as A,c as k,b as d,G as w,I as y,h as x,H as P,aF as q,y as E,M as u,n as D,w as S,m as I,aG as j}from"./chunks/theme.DAWdUpF4.js";import{J as c,m as V,p as z,G as f,c as N,L as e,q as s,a as i,t as _,S as F,s as b,a6 as a,o as O}from"./chunks/framework.Bev6ATEH.js";const R=a('<h1 id="transforms" tabindex="-1">Transforms <a class="header-anchor" href="#transforms" aria-label="Permalink to &quot;Transforms&quot;">‚Äã</a></h1><p><strong>Transforms</strong> derive data as part of the plot specification. This accelerates what is often the most onerous task in visualization: getting data into the right shape.</p><p>For example, given a <a href="https://gist.github.com/chrtze/c74efb46cadb6a908bbbf5227934bfea" target="_blank" rel="noreferrer">dataset of highway traffic</a> measured as vehicles per hour by location, plotting every observation is straightforward: use a <a href="./../marks/tick">tick</a> (or <a href="./../marks/dot">dot</a>) and assign <strong>x</strong> = vehicles per hour and <strong>y</strong> = location. But to draw a quantifiable insight, we may want a summary statistic such as the <em>median</em> traffic by location. üë©‚Äçüíª Below we use the <a href="./../transforms/group">group transform</a> to group by location and apply a <em>median</em> reducer to position the <span style="border-bottom:solid 2px var(--vp-c-red);">red</span> tick.</p>',3),Y=a(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-sorted-groups?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  marginLeft: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">120</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  x: {label: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Vehicles per hour (thousands)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  y: {label: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  marks: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ruleX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tickX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      traffic,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vehicles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;location&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strokeOpacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tickX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      traffic,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">groupY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;median&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vehicles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;location&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, stroke: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strokeWidth: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sort: {y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>As you might expect, traffic varies significantly throughout the day, so perhaps it would be better to look at the median by hour by location? Instead of grouping only by <strong>y</strong>, we can group by both <strong>x</strong> and <strong>y</strong> to produce a heatmap.</p>`,3),H=s("a",{class:"plot-fork no-icon",href:"https://observablehq.com/@observablehq/plot-sorted-heatmap?intent=fork",target:"_blank",title:"Open on Observable"},"Fork",-1),X={class:"language-js vp-adaptive-theme"},G=s("button",{title:"Copy Code",class:"copy"},null,-1),W=s("span",{class:"lang"},"js",-1),L={class:"shiki shiki-themes github-light github-dark vp-code"},M=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Plot."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plot"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"({")],-1),U=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  marginLeft: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"120"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")],-1),$=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  padding: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"0"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")],-1),J=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  y: {label: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"null"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"},")],-1),K={class:"line"},Q=s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  color: {scheme: ",-1),Z={style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},ss=a('<span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, legend: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, zero: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span>',5),is=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  marks: [")],-1),as=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    Plot."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"cell"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")],-1),ts=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"      traffic,")],-1),es=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"      Plot."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"group"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")],-1),ns=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        {fill: "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"median"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"},")],-1),ls=a('<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d.date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUTCHours</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;location&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vehicles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, inset: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sort: {y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}}</span></span>',1),hs=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"      )")],-1),rs=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    )")],-1),os=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  ]")],-1),ps=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")],-1),ks=a('<p>Plot includes many useful transforms! For example, you can compute a <a href="./../transforms/window">rolling average</a> to smooth a noisy signal, <a href="./../transforms/stack">stack layers</a> for a streamgraph, or <a href="./../transforms/dodge">dodge dots</a> for a beeswarm. Plot‚Äôs various built-in transforms include: <a href="./../transforms/bin">bin</a>, <a href="./../transforms/centroid">centroid</a>, <a href="./../transforms/dodge">dodge</a>, <a href="./../transforms/filter">filter</a>, <a href="./../transforms/group">group</a>, <a href="./../transforms/hexbin">hexbin</a>, <a href="./../transforms/interval">interval</a>, <a href="./../transforms/map">map</a>, <a href="./../transforms/normalize">normalize</a>, <a href="./../transforms/sort#reverse">reverse</a>, <a href="./../transforms/select">select</a>, <a href="./../transforms/sort#shuffle">shuffle</a>, <a href="./../transforms/sort">sort</a>, <a href="./../transforms/stack">stack</a>, <a href="./../transforms/tree">tree</a>, and <a href="./../transforms/window">window</a>. If these don‚Äôt meet your needs, you can even implement a <a href="#custom-transforms">custom transform</a>.</p><p>Transforms are never required ‚Äî¬†you can always aggregate and derive data yourself outside of Plot, and then pass in the binned values. For example, we could use <a href="https://d3js.org/d3-array/bin" target="_blank" rel="noreferrer">d3.bin</a> to compute a histogram of athletes‚Äô¬†weights as an array of {<em>x0</em>, <em>x1</em>, <em>length</em>} objects.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bins </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">thresholds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d.weight)(olympians)</span></span></code></pre></div><p>We can then pass that to the <a href="./../marks/rect">rect mark</a>, assigning to the <strong>x1</strong>, <strong>x2</strong>, and <strong>y2</strong> channels:</p>',4),ds=a('<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rectY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bins, {x1: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x2: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y2: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;length&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This is for demonstration only; you wouldn‚Äôt normally bin ‚Äúby hand‚Äù¬†as shown here.</p></div><p>But Plot‚Äôs transforms are often more convenient, especially in conjunction with Plot‚Äôs other features such as <a href="./facets">faceting</a> and automatic grouping by <strong>z</strong>. For example, if we want to add a color encoding to our histogram, we simply add the <strong>fill</strong> option and the bin transform partitions each bin accordingly; doing this with d3.bin would be a lot more work!</p>',3),Es=a(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-vertical-histogram?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rectY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">binX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({color: {legend: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}})</span></span></code></pre></div><p>Plot‚Äôs transforms typically take two <em>options</em> objects as arguments: the first object contains the <em>transform</em> options (above, <code>{y: &quot;count&quot;}</code>), while the second object contains <em>mark</em> options to be ‚Äúpassed through‚Äù to the mark (<code>{x: &quot;weight&quot;, fill: &quot;sex&quot;}</code>). The transform returns a new options object representing the <em>transformed</em> mark options to be passed to a mark.</p><p>Breaking down the above code:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// initial mark options</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> binOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// bin transform options</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> binned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">binX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(binOptions, options); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// transformed mark options</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rectY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(olympians, binned); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// rect mark</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> plot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({color: {legend: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}}); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// plot!</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If a transform isn‚Äôt doing what you expect, try inspecting the options object returned by the transform. Does it contain the options you expect?</p></div><p>Transforms can derive channels (such as <strong>y</strong> above) as well as changing the default options. For example, the bin transform sets default insets for a one-pixel gap between adjacent rects.</p>`,7),cs=s("em",null,"options",-1),gs=s("a",{href:"./../transforms/normalize"},"normalize transform",-1),ms=s("em",null,"sum",-1),ys=s("a",{class:"plot-fork no-icon",href:"https://observablehq.com/@observablehq/plot-overlapping-relative-histogram?intent=fork",target:"_blank",title:"Open on Observable"},"Fork",-1),us={class:"language-js vp-adaptive-theme"},fs=s("button",{title:"Copy Code",class:"copy"},null,-1),_s=s("span",{class:"lang"},"js",-1),Fs={class:"shiki shiki-themes github-light github-dark vp-code"},bs=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Plot."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plot"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"({")],-1),vs=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  y: {percent: "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"true"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"},")],-1),Cs=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  marks: [")],-1),Bs=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    Plot."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"rectY"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")],-1),Ts=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"      olympians,")],-1),As=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"      Plot."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"normalizeY"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")],-1),ws=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'        "sum"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// normalize each series by the sum per series")],-1),xs=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        Plot."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"binX"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")],-1),Ps=a('<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          {y2: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// disable implicit stack transform</span></span>',1),qs={class:"line"},Ds=a('<span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          {x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fill: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mixBlendMode: </span>',5),Ss={style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},Is=s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}",-1),js=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        )")],-1),Vs=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"      )")],-1),zs=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    )")],-1),Ns=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  ]")],-1),Os=s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"})")],-1),Rs=a('<p>And, as you may have wondered above, many of Plot‚Äôs <a href="./marks">marks</a> provide implicit transforms: for example, the <a href="./../marks/rect">rectY mark</a> applies an implicit <a href="./../transforms/stack">stackY transform</a> if you use the <strong>y</strong> option, and the <a href="./../marks/dot">dot mark</a> applies an implicit <a href="./../transforms/sort">sort transform</a> to mitigate the effect of occlusion by drawing the smallest dots on top.</p><h2 id="custom-transforms" tabindex="-1">Custom transforms <a class="header-anchor" href="#custom-transforms" aria-label="Permalink to &quot;Custom transforms&quot;">‚Äã</a></h2><p>For greater control, you can also implement a custom <strong>transform</strong> function, allowing data, indexes, or channels to be derived prior to rendering. Custom transforms are rarely implemented directly; see the built-in transforms above. For example, below we implement the <a href="./../transforms/filter">filter transform</a> ‚Äúby hand‚Äù as a custom transform to show the unemployment rates only in Michigan metropolitan divisions.</p>',3),Ys=a(`<a class="plot-fork no-icon" href="https://observablehq.com/@observablehq/plot-custom-transform-example?intent=fork" target="_blank" title="Open on Observable">Fork</a><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  y: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    grid: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    label: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Unemployment (%)&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  color: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    domain: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    range: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#ccc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  marks: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ruleY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bls, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;date&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;unemployment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      z: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;division&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">facets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        data,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        facets: facets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">facet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> facet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">, MI </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data[i].division);</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          });</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>The <strong>transform</strong> function is passed three arguments, <em>data</em>, <em>facets</em>, and <em>options</em> representing the mark‚Äôs data and facet indexes, and the plot‚Äôs options; it must then return a {<em>data</em>, <em>facets</em>} object with the transformed data and facet indexes. The <em>facets</em> are represented as a nested array of arrays such as [[0, 1, 3, ‚Ä¶], [2, 5, 10, ‚Ä¶], ‚Ä¶]; each element in <em>facets</em> specifies the zero-based indexes of elements in <em>data</em> that are in a given facet (<em>i.e.</em>, have a distinct value in the associated <em>fx</em> or <em>fy</em> dimension).</p><p>If the <strong>transform</strong> option is specified, it supersedes any basic transforms (<em>i.e.</em>, the <strong>filter</strong>, <strong>sort</strong> and <strong>reverse</strong> options are ignored). However, the <strong>transform</strong> option is rarely used directly; instead one of Plot‚Äôs built-in transforms are used, and these transforms automatically compose with the basic <strong>filter</strong>, <strong>sort</strong> and <strong>reverse</strong> transforms.</p><p>While transform functions often produce new <em>data</em> or <em>facets</em>, they may return the passed-in <em>data</em> and <em>facets</em> as-is, and often have a side-effect of constructing derived channels. For example, the count of elements in a <a href="./../transforms/group">groupX transform</a> might be returned as a new <em>y</em> channel. In this case, the transform is typically expressed as an options transform: a function that takes a mark <em>options</em> object and returns a new, transformed options object, where the returned options object implements the <strong>transform</strong> option. Transform functions should not mutate the input <em>data</em> or <em>facets</em>. Likewise options transforms should not mutate the input <em>options</em> object.</p><p>When implementing a custom transform for generic usage, keep in mind that it needs to be compatible with Plot‚Äôs <a href="./facets">faceting system</a>, which partitions the original dataset into discrete subsets.</p>`,6),Hs={id:"custom-initializers",tabindex:"-1"},Xs=s("a",{class:"header-anchor",href:"#custom-initializers","aria-label":'Permalink to "Custom initializers <VersionBadge version="0.5.0" />"'},"‚Äã",-1),Gs=a('<p>Initializers are a special class of transform; whereas transforms operate in abstract data space, initializers operate in screen space such as pixel coordinates and colors. For example, initializers can modify a marks‚Äô positions to avoid occlusion. Initializers are invoked <em>after</em> the initial scales are constructed and can modify the channels or derive new channels; these in turn may (or may not, as desired) be passed to scales. Plot‚Äôs <a href="./../transforms/hexbin">hexbin</a> and <a href="./../transforms/dodge">dodge</a> transforms are initializers.</p><p>You can specify a custom initializer by specifying a function as the mark <strong>initializer</strong> option. This function is called after the scales have been computed, and receives as inputs the (possibly transformed) array of <em>data</em>, the <em>facets</em> index of elements of this array that belong to each facet, the input <em>channels</em> (as an object of named channels), the <em>scales</em>, and the <em>dimensions</em>. The mark itself is the <em>this</em> context. The initializer function must return an object with <em>data</em>, <em>facets</em>, and new <em>channels</em>. Any new channels are merged with existing channels, replacing channels of the same name.</p><p>If an initializer desires a channel that is not supported by the downstream mark, additional channels can be declared using the mark <strong>channels</strong> option.</p>',3),Ws={id:"transform",tabindex:"-1"},Ls=s("em",null,"options",-1),Ms=s("em",null,"transform",-1),Us=s("a",{class:"header-anchor",href:"#transform","aria-label":'Permalink to "transform(*options*, *transform*) <VersionBadge version="0.4.3" /> {#transform}"'},"‚Äã",-1),$s=a(`<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">facets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    facets: facets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">I</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> I</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Given an <em>options</em> object that may specify some basic transforms (<strong>filter</strong>, <strong>sort</strong>, or <strong>reverse</strong>) or a custom <strong>transform</strong> function, composes those transforms if any with the given <em>transform</em> function, returning a new <em>options</em> object. If a custom <strong>transform</strong> function is present on the given <em>options</em>, any basic transforms are ignored. Any additional input <em>options</em> are passed through in the returned <em>options</em> object. This method facilitates applying the basic transforms prior to applying the given custom <em>transform</em> and is used internally by Plot‚Äôs built-in transforms.</p>`,2),Js={id:"initializer",tabindex:"-1"},Ks=s("em",null,"options",-1),Qs=s("em",null,"initializer",-1),Zs=s("a",{class:"header-anchor",href:"#initializer","aria-label":'Permalink to "initializer(*options*, *initializer*) <VersionBadge version="0.5.0" /> {#initializer}"'},"‚Äã",-1),si=a('<p>This helper composes the <em>initializer</em> function with any other transforms present in the <em>options</em>, and returns a new <em>options</em> object. It is used internally by Plot‚Äôs built-in initializer transforms.</p><h2 id="valueof" tabindex="-1">valueof(<em>data</em>, <em>value</em>, <em>type</em>) <a class="header-anchor" href="#valueof" aria-label="Permalink to &quot;valueof(*data*, *value*, *type*) {#valueof}&quot;">‚Äã</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aapl, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Close&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Given an iterable <em>data</em> and some <em>value</em> accessor, returns an array (a column) of the specified <em>type</em> with the corresponding value of each element of the data. The <em>value</em> accessor may be one of the following types:</p><ul><li>a string - corresponding to the field accessor (<code>(d) =&gt; d[value]</code>)</li><li>an accessor function - called as <em>type</em>.from(<em>data</em>, <em>value</em>)</li><li>a number, Date, or boolean ‚Äî resulting in an array uniformly filled with the <em>value</em></li><li>an object with a <strong>transform</strong> method ‚Äî called as <em>value</em>.transform(<em>data</em>)</li><li>an array of values - returning the same</li><li>null or undefined - returning the same</li></ul><p>If <em>type</em> is specified, it must be Array or a similar class that implements the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noreferrer">Array.from</a> interface such as a typed array. When <em>type</em> is Array or a typed array class, the return value of valueof will be an instance of the same (or null or undefined). When <em>type</em> is a typed array, values will be implicitly coerced numbers, and if <em>type</em> is Float64Array, Float32Array, or a subclass of the same, null values will be implicitly replaced with NaN. If <em>type</em> is not specified, valueof may return either an array or a typed array (or null or undefined).</p><p>valueof is not guaranteed to return a new array. When a transform method is used, or when the given <em>value</em> is an array that is compatible with the requested <em>type</em>, the array may be returned as-is without making a copy.</p>',7),ii={id:"column",tabindex:"-1"},ai=s("em",null,"source",-1),ti=s("a",{class:"header-anchor",href:"#column","aria-label":'Permalink to "column(*source*) <VersionBadge version="0.4.3" /> {#column}"'},"‚Äã",-1),ei=a('<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">X</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>This helper for constructing derived columns returns a [<em>column</em>, <em>setColumn</em>] array. The <em>column</em> object implements <em>column</em>.transform, returning whatever value was most recently passed to <em>setColumn</em>. If <em>setColumn</em> is not called, then <em>column</em>.transform returns undefined. If a <em>source</em> is specified, then <em>column</em>.label exposes the given <em>source</em>‚Äôs label, if any: if <em>source</em> is a string as when representing a named field of data, then <em>column</em>.label is <em>source</em>; otherwise <em>column</em>.label propagates <em>source</em>.label. This allows derived columns to propagate a human-readable axis or legend label.</p><p>This method is used by Plot‚Äôs transforms to derive channels; the associated columns are populated (derived) when the <strong>transform</strong> option function is invoked.</p>',3),ni={id:"identity",tabindex:"-1"},li=s("a",{class:"header-anchor",href:"#identity","aria-label":'Permalink to "identity <VersionBadge version="0.6.2" /> {#identity}"'},"‚Äã",-1),hi=a('<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contour</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data, {width: w, height: h, fill: Plot.identity})</span></span></code></pre></div><p>This channel helper returns a source array as-is, avoiding an extra copy when defining a channel as being equal to the data.</p>',2),ri={id:"indexOf",tabindex:"-1"},oi=s("a",{class:"header-anchor",href:"#indexOf","aria-label":'Permalink to "indexOf <VersionBadge version="0.6.6" /> {#indexOf}"'},"‚Äã",-1),pi=a('<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Plot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lineY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(numbers, {x: Plot.indexOf, y: Plot.identity})</span></span></code></pre></div><p>This channel helper returns an array of numbers [0, 1, 2, 3, ‚Ä¶]. It is used internally by marks with zero-based index defaults for channels.</p>',2),gi=JSON.parse('{"title":"Transforms","description":"","frontmatter":{},"headers":[],"relativePath":"features/transforms.md","filePath":"features/transforms.md"}'),ki={name:"features/transforms.md"},mi=Object.assign(ki,{setup(di){const g=c([]),r=c([]),o=c(["Saarbr√ºcken-Neuhaus","Oldenburg (Holstein)","Holz","G√∂ttelborn","Riegelsberg","Kastel","Neustadt i. H.-S√ºd","Nettersheim","Hasborn","Laufeld","Otzenhausen","Nonnweiler","Kirschheck","AS Eppelborn","Bierfeld","Von der Heydt","Illingen","Hetzerath","Gro√ü Ippener","Bockel","Ladbergen","Dibbersen","Euskirchen/Bliesheim","H√ºrth","Lotte","Ascheberg","Bad Schwartau","Schloss Burg","Uphusen","HB-Silbersee","Barsb√ºttel","HB-Mahndorfer See","Gl√ºsingen","HB-Weserbr√ºcke","Hengsen","K√∂ln-Nord","Hagen-Vorhalle","Unna"].map((t,p)=>({location:t,date:new Date(Date.UTC(2e3,0,1,p)),vehicles:(10+p)**2.382}))),v=V(()=>j().thresholds(80).value(t=>t.weight)(r.value)),m=A({color:{type:"categorical"}}).range;return z(()=>{k("../data/athletes.csv",d).then(t=>r.value=t),k("../data/bls-metro-unemployment.csv",d).then(t=>g.value=t),k("../data/traffic.csv",d).then(t=>o.value=t)}),(t,p)=>{const n=f("PlotRender"),l=f("VersionBadge");return O(),N("div",null,[R,e(n,{defer:"",options:{marginLeft:120,x:{label:"Vehicles per hour (thousands)",transform:h=>h/1e3},y:{label:null},marks:[w([0]),y(o.value,{x:"vehicles",y:"location",strokeOpacity:.3}),y(o.value,x({x:"median"},{x:"vehicles",y:"location",stroke:"var(--vp-c-red)",strokeWidth:4,sort:{y:"x"}}))]}},null,8,["options"]),Y,e(n,{defer:"",options:{marginLeft:120,padding:0,y:{label:null},color:{scheme:t.$dark?"turbo":"YlGnBu",legend:!0,zero:!0},marks:[P(o.value,q({fill:"median"},{x:h=>h.date.getUTCHours(),y:"location",fill:"vehicles",inset:.5,sort:{y:"fill"}}))]}},null,8,["options"]),H,s("div",X,[G,W,s("pre",L,[s("code",null,[M,i(`
`),U,i(`
`),$,i(`
`),J,i(`
`),s("span",K,[Q,s("span",Z,'"'+_(t.$dark?"turbo":"YlGnBu")+'"',1),ss]),i(`
`),is,i(`
`),as,i(`
`),ts,i(`
`),es,i(`
`),ns,i(`
`),ls,i(`
`),hs,i(`
`),rs,i(`
`),os,i(`
`),ps])])]),ks,e(n,{defer:"",mark:E(v.value,{x1:"x0",x2:"x1",y2:"length"}),options:{}},null,8,["mark"]),ds,e(n,{defer:"",mark:E(r.value,u({y:"count"},{x:"weight",fill:"sex"})),options:{color:{legend:!0}}},null,8,["mark"]),Es,s("p",null,[i("Transforms are composable: you can pass "),cs,i(" through more than one transform before passing it to a mark. For example, above it‚Äôs a bit difficult to compare the weight distribution by sex because there are fewer "),s("span",{style:F({borderBottom:`solid 2px ${b(m)[0]}`})},"female",4),i(" than "),s("span",{style:F({borderBottom:`solid 2px ${b(m)[1]}`})},"male",4),i(" athletes in the data. We can remove this effect using the "),gs,i(" with the "),ms,i(" reducer.")]),e(n,{defer:"",options:{y:{percent:!0},marks:[E(r.value,D("sum",u({y2:"count"},{x:"weight",fill:"sex",mixBlendMode:t.$dark?"screen":"multiply"})))]}},null,8,["options"]),ys,s("div",us,[fs,_s,s("pre",Fs,[s("code",null,[bs,i(`
`),vs,i(`
`),Cs,i(`
`),Bs,i(`
`),Ts,i(`
`),As,i(`
`),ws,i(`
`),xs,i(`
`),Ps,i(`
`),s("span",qs,[Ds,s("span",Ss,'"'+_(t.$dark?"screen":"multiply")+'"',1),Is]),i(`
`),js,i(`
`),Vs,i(`
`),zs,i(`
`),Ns,i(`
`),Os])])]),Rs,e(n,{defer:"",options:{y:{grid:!0,label:"Unemployment (%)"},color:{domain:[!1,!0],range:["#ccc","var(--vp-c-red)"]},marks:[S([0]),I(g.value,{x:"date",y:"unemployment",z:"division",transform:(h,C)=>({data:h,facets:C.map(B=>B.filter(T=>/, MI /.test(h[T].division)))})})]}},null,8,["options"]),Ys,s("h2",Hs,[i("Custom initializers "),e(l,{version:"0.5.0"}),i(),Xs]),Gs,s("h2",Ws,[i("transform("),Ls,i(", "),Ms,i(") "),e(l,{version:"0.4.3"}),i(),Us]),$s,s("h2",Js,[i("initializer("),Ks,i(", "),Qs,i(") "),e(l,{version:"0.5.0"}),i(),Zs]),si,s("h2",ii,[i("column("),ai,i(") "),e(l,{version:"0.4.3"}),i(),ti]),ei,s("h2",ni,[i("identity "),e(l,{version:"0.6.2"}),i(),li]),hi,s("h2",ri,[i("indexOf "),e(l,{version:"0.6.6"}),i(),oi]),pi])}}});export{gi as __pageData,mi as default};
